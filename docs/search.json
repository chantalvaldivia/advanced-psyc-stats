[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "advanced-psyc-stats",
    "section": "",
    "text": "Lab 5 - Poisson - Questions\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBayes and Penguins\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLab: Logistic Regression\n\n\nPrinceton University\n\n\n\n\n\n\n\n\nChantal Valdivia-Moreno\n\n\n\n\n\n\n\n\n\n\n\n\nIntro to MLM Exercise/Walkthrough\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOrdinal Regression Lab Answers\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLab 4 - Multinomial Regression - Questions\n\n\n\n\n\n\n\n\n\n\n\nMar 1, 2025\n\n\nChantal Valdivia-Moreno\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/Lab-Logistic-Q.html",
    "href": "posts/Lab-Logistic-Q.html",
    "title": "Lab: Logistic Regression",
    "section": "",
    "text": "Assignment requirements:\n\nIf you are using Github (recommended), make sure to commit and push your work to GitHub regularly, at least after each exercise. Write short and informative commit messages, and share the link to your assignment with me. If not, you can also send me the rmd & rendered file via Canvas.\nIn this assignment, you will not need to code from scratch. Rather, you’ll need to fill in code where needed. This assignment has a logisitic regression implementation for a scenario from EDA down to model comparison (and would be useful for whenever you may encounter such a situation in the future).\nI want the assignments to begin reflecting a bit more of how you’d be doing things on your own, where you have some prior knowledge and you figure other things out (by referring to documentation, etc.) . In addition to the rmd, I also want you to submit to me notes of anything new that you learn while finishing the assignment. And any pain-points, and we’ll discuss more.\n\nIn general I struggled with this assignment due to the length and just being unclear on some of the points (like what a question was asking) but otherwise I liked this new format of assignment where there were chances to verify your work and repeat some of the same skills.\nI like anything where we build with ggplot\nMaybe some more hints throughout could be helpful?\n\n\nNote:\n\nIf you are fitting a model, display the model output in a neatly formatted table. (The gt tidy and kable functions can help!). Modelsummary also looks good(https://vincentarelbundock.github.io/modelsummary/articles/modelsummary.html)\nMake sure that your plots are clearly labeled – for all axes, titles, etc."
  },
  {
    "objectID": "posts/Lab-Logistic-Q.html#data-general-social-survey",
    "href": "posts/Lab-Logistic-Q.html#data-general-social-survey",
    "title": "Lab: Logistic Regression",
    "section": "Data: General Social Survey",
    "text": "Data: General Social Survey\nThe General Social Survey (GSS) has been used to measure trends in attitudes and behaviors in American society since 1972. In addition to collecting demographic information, the survey includes questions used to gauge attitudes about government spending priorities, confidence in institutions, lifestyle, and many other topics. A full description of the survey may be found here.\nThe data for this lab are from the 2016 General Social Survey. The original data set contains 2867 observations and 935 variables. We will use and abbreviated data set that includes the following variables:\nnatmass: Respondent’s answer to the following prompt:\n“We are faced with many problems in this country, none of which can be solved easily or inexpensively. I’m going to name some of these problems, and for each one I’d like you to tell me whether you think we’re spending too much money on it, too little money, or about the right amount…are we spending too much, too little, or about the right amount on mass transportation?”\nage: Age in years.\nsex: Sex recorded as male or female\nsei10: Socioeconomic index from 0 to 100\nregion: Region where interview took place\npolviews: Respondent’s answer to the following prompt:\n“We hear a lot of talk these days about liberals and conservatives. I’m going to show you a seven-point scale on which the political views that people might hold are arranged from extremely liberal - point 1 - to extremely conservative - point 7. Where would you place yourself on this scale?”\nThe data are in gss2016.csv in the data folder."
  },
  {
    "objectID": "posts/Lab-Logistic-Q.html#eda",
    "href": "posts/Lab-Logistic-Q.html#eda",
    "title": "Lab: Logistic Regression",
    "section": "EDA",
    "text": "EDA\n\nLet’s begin by making a binary variable for respondents’ views on spending on mass transportation. Create a new variable that is equal to “1” if a respondent said spending on mass transportation is about right and “0” otherwise. Then plot the proportion of the response variable, using informative labels for each category.\n\n\n\nCode\n# loading required packages\nif (!require(\"dplyr\")) {install.packages(\"dplyr\"); require(\"dplyr\")}\nif (!require(\"ggplot2\")) {install.packages(\"ggplot2\"); require(\"ggplot2\")}\nif (!require(\"readr\")) {install.packages(\"readr\"); require(\"readr\")}\nif (!require(\"modelsummary\")) {install.packages(\"modelsummary\"); require(\"modelsummary\")}\nif (!require(\"tidyr\")) {install.packages(\"tidyr\"); require(\"tidyr\")}\nif (!require(\"knitr\")) {install.packages(\"knitr\"); require(\"knitr\")}\nif (!require(\"easystats\")) {install.packages(\"easystats\"); require(\"easystats\")}\nif (!require(\"broom\")) {install.packages(\"broom\"); require(\"broom\")}\nif (!require(\"emmeans\")) {install.packages(\"emmeans\"); require(\"emmeans\")}\nif (!require(\"marginaleffects\")) {install.packages(\"marginaleffects\"); require(\"marginaleffects\")}\nif (!require(\"performance\")) {install.packages(\"performance\"); require(\"performance\")}\nif (!require(\"arm\")) {install.packages(\"arm\"); require(\"arm\")}\nif (!require(\"modelsummary\")) {install.packages(\"modelsummary\"); require(\"modelsummary\")}\n\n\n\n\nCode\ndata &lt;- read.csv(\"gss2016.csv\")\n\n\nFill in the “____” below to encode the binary variable\n\n\nCode\ndata &lt;- data %&gt;%\n   mutate(mass_trans_spend_right = if_else(natmass == \"About right\", 1, 0))\n\n\n\n\nCode\n#Get proportions\nmass_spend_summary &lt;- data %&gt;%\n  count(mass_trans_spend_right) %&gt;%\n  mutate(proportion = n / sum(n))\n\n#Look at the dataframe structure. And make sure it's in a format that you can use for plotting.\n#Change structure if needed\nmass_spend_long &lt;- pivot_longer(mass_spend_summary, names_to = \"opinion\", values_to = \"proportion\", cols = proportion)\n\n#Factorise for plot\nmass_spend_long$mass_trans_spend_right &lt;- as.factor(mass_spend_long$mass_trans_spend_right)\n\n#Make plot\n#Hint: geom_bar lets you make stacked bar charts\nggplot(mass_spend_long, aes(x = opinion, y = proportion, fill = mass_trans_spend_right)) +\n  geom_bar(stat = \"identity\") +\n  scale_fill_manual(values = c(\"#fee8c8\",\"#fdbb84\"),\n    labels = c(\"Not right\", \"About right\")) + \n  labs(title = \"Propotion of responses on mass transportation item\",\n       x = \"Opinion\",\n       y = \"Proportion\",\n       fill = \"Opinion\")\n\n\n\n\n\n\n\n\n\n\nRecode polviews so it is a factor with levels that are in an order that is consistent with question on the survey. Note how the categories are spelled in the data.\n\n\n\nCode\ndata &lt;- data %&gt;%\n  mutate(polviews = factor(polviews,\n                           levels = c(\"Extremely liberal\", \"Liberal\", \"Slightly liberal\", \n                                      \"Moderate\", \"Slghtly conservative\", \"Conservative\", \n                                      \"Extrmly conservative\"),\n                           ordered = TRUE))\n\n\n\nMake a plot of the distribution of polviews\n\n\n\nCode\n#Get proportions, format, and produce a plot like you did previously for mass_trans_spend_right\n\n#Get proportions\npol_view_summary &lt;- data %&gt;%\n  count(polviews) %&gt;%\n  mutate(proportion = n / sum(n))\n\n#Make plot\n#Hint: geom_bar lets you make stacked bar charts\nggplot(pol_view_summary, aes(x = polviews, y = proportion, fill = polviews)) +\n  geom_bar(stat = \"identity\") + \n    scale_fill_manual(values = c(\"#fef0d9\",\"#fdd49e\", \"#fdbb84\", \"#fc8d59\",\"#e34a33\", \"#d7301f\", \"#990000\")) +\n    labs(title = \"Proportion of responses on mass transportation item\",\n    x = \"Political views\",\n    y = \"Proportion\",\n    fill = \"Political view\")\n\n\n\n\n\n\n\n\n\n\nWhich political view occurs most frequently in this data set?\nModerate\n\n\nMake a plot displaying the relationship between satisfaction with mass transportation spending and political views. Use the plot to describe the relationship the two variables.\n\n\n\nCode\ndata %&gt;%\n  group_by(polviews) %&gt;%\n  summarize(prop_satisfied = mean(mass_trans_spend_right), na.rn = T) %&gt;% \n  ggplot(aes(x = polviews, y = prop_satisfied, fill = polviews)) + \n  geom_bar(stat = \"identity\") +\n  labs(title = \"Proportion of responses on mass transportation item\",\n       x = \"Political views\",\n       y = \"Proportion satisfied with spending\",\n       fill = \"Opinions\") \n\n\n\n\n\n\n\n\n\nThe more conservative one’s political views are the more they think the amount of spending on mass transportation is correct.\n\nWe’d like to use age as a quantitative variable in your model; however, it is currently a character data type because some observations are coded as “89 or older”.\n\n\nRecode age so that is a numeric variable. Note: Before making the variable numeric, you will need to replace the values “89 or older” with a single value.\n\n\n\nCode\ndata = data %&gt;%\n  dplyr::mutate(age = if_else(age == \"89 or older\", \"89\", age)) %&gt;%\n  dplyr::mutate(age = as.numeric(age))\n\n\n\nPlot the frequency distribution of age.\n\n\n\nCode\ndata |&gt; \n  ggplot(aes(x = age)) + \n  geom_density(binwidth = 5, fill = \"orange\") + \n  labs(title = \"Frequency distribution of age\",\n       x = \"age\",\n       y = \"frequency\")"
  },
  {
    "objectID": "posts/Lab-Logistic-Q.html#logistic-regression",
    "href": "posts/Lab-Logistic-Q.html#logistic-regression",
    "title": "Lab: Logistic Regression",
    "section": "Logistic regression",
    "text": "Logistic regression\n\nLet’s start by fitting a logistic regression model with just the intercept\n\n\n\nCode\nintercept_only_model &lt;- glm(\n  mass_trans_spend_right ~ 1,\n  data = data,\n  family = binomial(link = \"logit\"))\n\nintercept_only_model %&gt;% \n  tidy()\n\n\n# A tibble: 1 × 5\n  term        estimate std.error statistic p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt;\n1 (Intercept)    0.119    0.0394      3.02 0.00249\n\n\n\nInterpret the intercept in the context of the data. You can do this by converting the \\(\\beta_0\\) parameter out of the log-odds metric to the probability metric. Make sure to include the 95% confidence intervals. Then interpret the results in a sentence or two–what is the basic thing this probability tells us about?\n\n\n\nCode\nb0 &lt;- coef(intercept_only_model) # get coef\n\nb0_transformed &lt;- exp(b0) / (1 + exp(b0)) # logistic transform\n\nci_lower = b0 - 1.96 * 0.0393685\nci_upper = b0 + 1.96 * 0.0393685\n\n#transforming confidence intervals of coefficients into probabilities\np_lower = exp(ci_lower)/(1+exp(ci_lower))\np_upper = exp(ci_upper)/(1+exp(ci_upper))\n\nb0_transformed\n\n\n(Intercept) \n  0.5297297 \n\n\nCode\np_lower\n\n\n(Intercept) \n  0.5104727 \n\n\nCode\np_upper \n\n\n(Intercept) \n  0.5488986 \n\n\nInterpretation: About 53% with a 95% CI of 0.51 to 0.55 of people support the policy\n\nNow let’s fit a model using the demographic factors - age,sex, sei10 - to predict the odds a person is satisfied with spending on mass transportation. Make any necessary adjustments to the variables so the intercept will have a meaningful interpretation. Neatly display the model coefficients (do not display the summary output)\n\n\n\nCode\n#make sure that sex is a factor (i.e. to make sure R knows it's binary/categorical, and not continuous)\ndata &lt;- data %&gt;% \n  mutate(sex_clean = as.factor(sex))\n\n#fit with glm()\nm1 &lt;- glm(\n  mass_trans_spend_right ~  age + sex + sei10,\n  data = data,\n  family = binomial(link = \"logit\"))\n\n#produce tidy output of model coefficients\nm1 %&gt;%\n  tidy()\n\n\n# A tibble: 4 × 5\n  term        estimate std.error statistic       p.value\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;         &lt;dbl&gt;\n1 (Intercept)  0.825     0.140        5.91 0.00000000332\n2 age         -0.00617   0.00228     -2.70 0.00690      \n3 sexMale     -0.256     0.0798      -3.20 0.00135      \n4 sei10       -0.00623   0.00166     -3.75 0.000177     \n\n\n\nConsider the relationship between sex and one’s opinion about spending on mass transportation. Interpret the coefficient of sex in terms of the logs odds and OR of being satisfied with spending on mass transportation. What are the predicted probabilities for males and females on support for spending on mass transportation? Please include the 95% CIs around each estimate.\n\n\n\nCode\nm1 %&gt;% \n  tidy() %&gt;%\n  kable()\n\n\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n0.8254509\n0.1395587\n5.914722\n0.0000000\n\n\nage\n-0.0061659\n0.0022824\n-2.701502\n0.0069027\n\n\nsexMale\n-0.2557439\n0.0798020\n-3.204732\n0.0013519\n\n\nsei10\n-0.0062271\n0.0016609\n-3.749229\n0.0001774\n\n\n\n\n\nCode\nm1 %&gt;% \n  tidy(exponentiate = TRUE) %&gt;%\n  kable()\n\n\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\n\n\n\n\n(Intercept)\n2.2829100\n0.1395587\n5.914722\n0.0000000\n\n\nage\n0.9938530\n0.0022824\n-2.701502\n0.0069027\n\n\nsexMale\n0.7743403\n0.0798020\n-3.204732\n0.0013519\n\n\nsei10\n0.9937922\n0.0016609\n-3.749229\n0.0001774\n\n\n\n\n\nCode\nbsex &lt;- coef(m1)[\"sexFemale\"]\n\nci_lower_lo = bsex - 1.96 * 0.0798020\nci_upper_lo = bsex + 1.96 * 0.0798020\n\nci_lower_or = 1.29 - 1.96 * 0.0798020\nci_upper_or = 1.29 + 1.96 * 0.0798020\n\nemm_sex &lt;- emmeans(m1, \"sex\", type = \"response\")\n\n\nIf you did this right, you’ll find that being female (as compared to male) is associated with an increase in the log-odds of being satisfied with spending on mass transportation by 0.2557439 units (95% CI [0.09, 0.41]), holding all other variables constant. This equates to the odds of thinking the spending amount is right in females being 1.29 times the odds of thinking this in men (95% CI [1.13, 1.44]).\nThe predicted probability for females to be satisfied with spending on mass transportation is 55.9% (95% CI [53.3%, 58.5%]) and that of males is 49.5% (95% CI [46.7%, 52.4%]).\n\nVerify this.\nI think I was able to verify the results of the probability, but the log-odds seem to be inverse for me but the numbers are still correct\n\nNext, consider the relationship between age and one’s opinion about spending on mass transportation. Interpret the coefficient of age in terms of the logs odds and OR of being satisfied with spending on mass transportation. Please include the 95% CIs around each estimate.\n\n\n\nCode\nbage &lt;- coef(m1)[\"age\"]\n\nci_lower_lo_age = bage - 1.96 * 0.002282412 \nci_upper_lo_age = bage + 1.96 * 0.002282412 \n\n# odds ratio\nor_age &lt;- exp(bage)\n\nci_lower_or_age = 1.29 - 1.96 * 0.002282412 \nci_upper_or_age = 1.29 + 1.96 * 0.002282412 \n\nemm_age &lt;- emmeans(m1, \"age\", type = \"response\")\n\n\nA one unit increase in age is associated with a decrease in the log-odds of being satisfied with spending on mass transportation by .006, holding all other variables constant. The odds ratio is 0.994 which confirms the negative relationship implied by the log-odds coefficient. Specifically, for each additional unit of age, the odds of being satisfied with mass transportation spending decrease by a factor of about 0.994, or approximately .006 per unit increase in age, holding other factors constant. (I am not confident in these results)\n\nConsider the relationship between SES and one’s opinion about spending on mass transportation. Interpret the coefficient of SES in terms of the logs odds and OR of being satisfied with spending on mass transportation. Please include the 95% CIs around each estimate. ß\n\n\n\nCode\nbses &lt;- coef(m1)[\"sei10\"]\n\nses_se &lt;- summary(m1)$coefficients[\"sei10\", \"Std. Error\"]\nci_lower_lo_bses = bses - 1.96 * 0.0016609  \nci_upper_lo_bses = bses + 1.96 * 0.0016609  \n\n# odds ratio\nor_ses &lt;- exp(bses)\n\nci_lower_or_bses = 1.29 - 1.96 * 0.0016609  \nci_upper_or_bses = 1.29 + 1.96 * 0.0016609  \n\nemm_ses &lt;- emmeans(m1, \"sei10\", type = \"response\")\n\n\nA one unit increase in SES index is associated with a decrease in the log-odds of being satisfied with spending on mass transportation by 0.0062 units (95% CI [-0.0107, -0.0017]), holding all other variables constant. The odds ratio is less than 1 (0.9937922), which confirms the negative relationship implied by the log-odds coefficient. Specifically, for each additional unit of SES index, the odds of being satisfied with mass transportation spending decrease by a factor of about 0.993, or approximately 0.7% per unit increase in SES index, holding other factors constant (95% CI [0.989, 0.998])."
  },
  {
    "objectID": "posts/Lab-Logistic-Q.html#marginal-effects",
    "href": "posts/Lab-Logistic-Q.html#marginal-effects",
    "title": "Lab: Logistic Regression",
    "section": "Marginal effects",
    "text": "Marginal effects\n\nLet’s examine the results on the probability scale.\n\n\nCalculate the marginal effects of sex, age, and SES on mass transportation spending. You can use the margins package function margins discussed in your textbook or you can use the marginaleffects package avg_slope avg_comparisons discussed in lecture. Interpret each estimate.\n\n\n\nCode\navg_comparisons(m1, comparison = \"difference\") %&gt;% \n  kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nterm\ncontrast\nestimate\nstd.error\nstatistic\np.value\ns.value\nconf.low\nconf.high\n\n\n\n\nage\n+1\n-0.0015153\n0.0005579\n-2.716128\n0.0066050\n7.242217\n-0.0026088\n-0.0004219\n\n\nsei10\n+1\n-0.0015304\n0.0004039\n-3.789362\n0.0001510\n12.692831\n-0.0023219\n-0.0007388\n\n\nsex\nMale - Female\n-0.0630688\n0.0196461\n-3.210251\n0.0013262\n9.558495\n-0.1015743\n-0.0245632\n\n\n\n\n\nCode\navg_slopes(m1) %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nterm\ncontrast\nestimate\nstd.error\nstatistic\np.value\ns.value\nconf.low\nconf.high\n\n\n\n\nage\ndY/dX\n-0.0015151\n0.0005577\n-2.716570\n0.0065962\n7.244144\n-0.0026082\n-0.0004220\n\n\nsei10\ndY/dX\n-0.0015301\n0.0004037\n-3.789984\n0.0001507\n12.696444\n-0.0023214\n-0.0007388\n\n\nsex\nMale - Female\n-0.0630688\n0.0196461\n-3.210251\n0.0013262\n9.558495\n-0.1015743\n-0.0245632\n\n\n\n\n\n\nThe marginal effect of age is -0.0015153 (95% CI [-0.0026088, -0.0004219]). So, for each additional unit increase of age, the probability of being satisfied with mass transportation spending decreases by approximately 0.15 percentage points, holding other factors constant (p = 0.0066050).\nThe marginal effect of SES is 0.0015304 (95% CI [-0.0023219, -0.0007388]). For each one-unit increase in the socioeconomic index, the probability of being satisfied with mass transportation spending decreases by approximately 0.15 percentage points, holding other variables constant.\nThe marginal effect for being female compared to male is 0.0630688 (95% CI [-0.1015743, -0.0245632]). This indicates that females are, on average, about 6.31 percentage points more likely than males to be satisfied with mass transportation spending, holding other factors constant."
  },
  {
    "objectID": "posts/Lab-Logistic-Q.html#model-comparison",
    "href": "posts/Lab-Logistic-Q.html#model-comparison",
    "title": "Lab: Logistic Regression",
    "section": "Model comparison",
    "text": "Model comparison\n\nNow let’s see whether a person’s political views has a significant impact on their odds of being satisfied with spending on mass transportation, after accounting for the demographic factors.\n\n\nConduct a drop-in-deviance/likelihood ratio test to determine if polviews is a significant predictor of attitude towards spending on mass transportation. Name these two models fit2 and fit3, respectively. Compare the two models.\n\n\n\nCode\nfit2 &lt;- glm(mass_trans_spend_right~age + sex +sei10, data = data, family = binomial(link=\"logit\"))\n\nfit3 &lt;- glm(mass_trans_spend_right ~ polviews + age + sex + sei10, data = data, family = binomial(link = \"logit\"))\n\ntest_likelihoodratio(fit2, fit3) %&gt;% kable()\n\n\n\n\n\n\nName\nModel\ndf\ndf_diff\nChi2\np\n\n\n\n\nfit2\nfit2\nglm\n4\nNA\nNA\nNA\n\n\nfit3\nfit3\nglm\n10\n6\n63.02844\n0\n\n\n\n\n\n\nIs the model with polviews better than the model without?\n\n\nYes (LRT show p&lt;.001)"
  },
  {
    "objectID": "posts/Lab-Logistic-Q.html#visualization",
    "href": "posts/Lab-Logistic-Q.html#visualization",
    "title": "Lab: Logistic Regression",
    "section": "Visualization",
    "text": "Visualization\n\nLet’s plot the results\nWe next use the model to produce visualizations:\n\nGiven the code below, interpet what is being plotted:\n\npol_plot : support for mass transit spending is highest for extreme conervatives\nsex_plot : women more likely to support more spending\nses_plot: lower SES also predicts more spending support\n\n\n\n\n\n\n\n\nTip\n\n\n\n\nadjust the various settings in your plot to make it look professional.\nYou can use ggeffects to get the predicted probabilities for these models.\n\n\n\n\n\n\nCode\nlibrary(ggeffects)\n\n\ncolors &lt;- c(\"Extremely liberal\" = \"black\",\n            \"Liberal\" = \"#0e2f44\",  # Dark blue\n            \"Slightly liberal\" = \"#1d5a6c\",  # Less dark blue\n            \"Moderate\" = \"#358ca3\",  # Medium blue\n            \"Slghtly conservative\" = \"#71b9d1\",  # Light blue\n            \"Conservative\" = \"#a6dcef\",  # Lighter blue\n            \"Extrmly conservative\" = \"#d0f0fd\")  # Very light blue\n\npp_pol &lt;- ggemmeans(fit3, terms = c(\"polviews\"))\n\n# Adjusted plot with gradient colors\npol_plot &lt;- ggplot(pp_pol, aes(x = x, y = predicted, color = x)) +\n  geom_point(size = 2) +\n  geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.2) +\n  scale_color_manual(values = colors) +\n  labs(title = \"Effect of Political Views on Satisfaction with Mass Transportation\",\n       x = \"Political Views\", y = \"Predicted Probability\",\n       color = \"Political Views\") +\n  theme_minimal()\n\npol_plot\n\n\n\n\n\n\n\n\n\nCode\npp_sex &lt;- ggemmeans(fit3, terms = c(\"sex\"))\n\nsex_plot &lt;- ggplot(pp_sex, aes(x = x, y = predicted, color = x)) +\n  geom_point(size = 2) +\n  geom_errorbar(aes(ymin = conf.low, ymax = conf.high), width = 0.2) +\n  labs(title = \"Effect of Sex on Satisfaction with Mass Transportation\",\n       x = \"Sex\", y = \"Predicted Probability\",\n       color = \"Sex\") +\n  theme_minimal()\nsex_plot\n\n\n\n\n\n\n\n\n\nCode\npp_sex\n\n\n# Predicted probabilities of mass_trans_spend_right\n\nsex    | Predicted |     95% CI\n-------------------------------\nMale   |      0.48 | 0.44, 0.51\nFemale |      0.55 | 0.51, 0.58\n\nAdjusted for:\n*   age = 48.90\n* sei10 = 46.07\n\n\nCode\npp_ses &lt;- ggemmeans(fit3, terms = \"sei10\")\n\n\nses_plot &lt;-  ggplot(pp_ses, aes(x = x, y = predicted)) +\n  geom_line(color = \"#2c7fb8\", size = 1) + \n  geom_ribbon(aes(ymin = conf.low, ymax = conf.high), fill = \"#2c7fb8\", alpha = 0.2) +  # Add a confidence interval band\n  labs(title = \"Effect of SES on Satisfaction with Mass Transportation\",\n       x = \"Socioeconomic Status\", y = \"Predicted Probability\") +\n  theme_minimal() +\n  theme(legend.position = \"none\")  \nses_plot"
  },
  {
    "objectID": "posts/Lab-Logistic-Q.html#model-assumptions",
    "href": "posts/Lab-Logistic-Q.html#model-assumptions",
    "title": "Lab: Logistic Regression",
    "section": "Model Assumptions",
    "text": "Model Assumptions\n\nIs the logistic model a good choice for this data?\n\n\n\nCode\nbinned_residuals(fit2)\n\n\nWarning: About 86% of the residuals are inside the error bounds (~95% or higher would be good).\n\n\n\n\n\n\n\n\nNote\n\n\n\nAnswer: Doesn’t seem like it because the warning says that we’re only at 86% of the residuals being inside the error bounds and we should be closer to 95%"
  },
  {
    "objectID": "posts/Lab-Logistic-Q.html#model-fit",
    "href": "posts/Lab-Logistic-Q.html#model-fit",
    "title": "Lab: Logistic Regression",
    "section": "Model fit",
    "text": "Model fit\n\nCalculate the \\(R^2\\) for this model\n\n\n\nCode\nr2_mcfadden(fit2)\n\n\n# R2 for Generalized Linear Regression\n       R2: 0.010\n  adj. R2: 0.009\n\n\n\nR2 interpretation: This model accounts for .01% of the data which is not great\nNext, Take a look at the binned residual plots for each continuous predictor variable and look at linearity. Is there a predictor that sticks out? What can we do to improve model fit in this case?\n\n\n\nCode\nbinned_residuals(fit2, term=\"sei10\")\n\n\nWarning: About 88% of the residuals are inside the error bounds (~95% or higher would be good).\n\n\nCode\nbinned_residuals(fit2, term=\"age\")\n\n\nOk: About 98% of the residuals are inside the error bounds.\n\n\nCode\nbinned_residuals(fit2, term=\"sei10\") %&gt;% plot(show_dots=TRUE)\n\n\n\n\n\n\n\n\n\nCode\nbinned_residuals(fit2, term=\"age\") %&gt;% plot(show_dots=TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nAge is a better predictor than SEI, given that age has less residuals outside of bound than sei10 does? Also nonlinear trend here could indicate transformations are required."
  },
  {
    "objectID": "posts/Lab-Logistic-Q.html#testing-polviews",
    "href": "posts/Lab-Logistic-Q.html#testing-polviews",
    "title": "Lab: Logistic Regression",
    "section": "Testing Polviews",
    "text": "Testing Polviews\n\n\nCode\nemmeans(fit3, \"polviews\") %&gt;% pairs() %&gt;% as.data.frame() %&gt;% filter(p.value &lt; .05)\n\n\n contrast                                   estimate        SE  df z.ratio\n Extremely liberal - Moderate             -0.9266262 0.1950664 Inf  -4.750\n Extremely liberal - Slghtly conservative -0.8487137 0.2127293 Inf  -3.990\n Extremely liberal - Conservative         -0.9935486 0.2108369 Inf  -4.712\n Extremely liberal - Extrmly conservative -1.3402621 0.2792876 Inf  -4.799\n Liberal - Moderate                       -0.7090022 0.1308520 Inf  -5.418\n Liberal - Slghtly conservative           -0.6310897 0.1555805 Inf  -4.056\n Liberal - Conservative                   -0.7759246 0.1532081 Inf  -5.065\n Liberal - Extrmly conservative           -1.1226380 0.2392048 Inf  -4.693\n Slightly liberal - Extrmly conservative  -0.7334002 0.2412625 Inf  -3.040\n p.value\n  &lt;.0001\n  0.0013\n  0.0001\n  &lt;.0001\n  &lt;.0001\n  0.0010\n  &lt;.0001\n  0.0001\n  0.0382\n\nResults are averaged over the levels of: sex \nResults are given on the log odds ratio (not the response) scale. \nP value adjustment: tukey method for comparing a family of 7 estimates \n\n\nCode\nemmeans(fit3, \"polviews\", type=\"response\") %&gt;% pairs() %&gt;% as.data.frame() %&gt;% filter(p.value &lt; .05)\n\n\n contrast                                 odds.ratio         SE  df null\n Extremely liberal / Moderate              0.3958871 0.07722426 Inf    1\n Extremely liberal / Slghtly conservative  0.4279651 0.09104070 Inf    1\n Extremely liberal / Conservative          0.3702605 0.07806458 Inf    1\n Extremely liberal / Extrmly conservative  0.2617771 0.07311109 Inf    1\n Liberal / Moderate                        0.4921350 0.06439684 Inf    1\n Liberal / Slghtly conservative            0.5320118 0.08277063 Inf    1\n Liberal / Conservative                    0.4602780 0.07051835 Inf    1\n Liberal / Extrmly conservative            0.3254202 0.07784206 Inf    1\n Slightly liberal / Extrmly conservative   0.4802732 0.11587191 Inf    1\n z.ratio p.value\n  -4.750  &lt;.0001\n  -3.990  0.0013\n  -4.712  0.0001\n  -4.799  &lt;.0001\n  -5.418  &lt;.0001\n  -4.056  0.0010\n  -5.065  &lt;.0001\n  -4.693  0.0001\n  -3.040  0.0382\n\nResults are averaged over the levels of: sex \nP value adjustment: tukey method for comparing a family of 7 estimates \nTests are performed on the log odds ratio scale \n\n\n\nConservatives are .37 times more likely to support mass transit spending compared to extremely liberal and liberal\nExtreme liberals are .42 times more likely to support spending compared to conservatives, moderates and slight conservatives\nExtrm conservatives are .48 times more likely to support mass spending than liberals and slight liberals\nLiberals are .49 times more likely to support spending than moderates and slight conservatives.\n\n(I am not confident about these results above)"
  },
  {
    "objectID": "posts/Lab-Logistic-Q.html#conclusion",
    "href": "posts/Lab-Logistic-Q.html#conclusion",
    "title": "Lab: Logistic Regression",
    "section": "Conclusion",
    "text": "Conclusion\nPolitical views are the best predictor of mass transportation spending opinions, given the large reduction in deviance. Age and sex perform almost equally, but sei10 is not all that helpful\n\n\n\n\nDf\nDeviance\nResid. Df\nResid. Dev\nPr(&gt;Chi)\n\n\n\n\nNULL\nNA\nNA\n2589\n3581.340\nNA\n\n\npolviews\n6\n64.575385\n2583\n3516.765\n0.0000000\n\n\nage\n1\n12.999334\n2582\n3503.766\n0.0003116\n\n\nsex\n1\n12.946009\n2581\n3490.820\n0.0003206\n\n\nsei10\n1\n8.051857\n2580\n3482.768\n0.0045457\n\n\n\nTable 1\n\n\n\n\n\nFigure 1: Effect of Sex on Satisfaction with Mass Transportation\n\n\n\n\n\n\n\n\n\nFigure 2: Effect of SES on Satisfaction with Mass Transportation\n\n\n\n\n\n\n\n\n\nFigure 3: Effect of Political Views on Satisfaction with Mass Transportation"
  },
  {
    "objectID": "posts/ord_lab_q.html",
    "href": "posts/ord_lab_q.html",
    "title": "Ordinal Regression Lab Answers",
    "section": "",
    "text": "If you are fitting a model, display the model output in a neatly formatted table. (The tidy and kable functions can help!)\nIf you are creating a plot, use clear labels for all axes, titles, etc.\nIf you are using Github, don’t forget to commit and push your work to to it regularly, at least after each exercise. Write short and informative commit messages. Else, if you are submitting on Canvas, make sure that the version you submit is the latest, and that it runs/knits without any errors.\nWhen you’re done, we should be able to knit the final version of the QMD in your GitHub as a HTML."
  },
  {
    "objectID": "posts/ord_lab_q.html#instructions",
    "href": "posts/ord_lab_q.html#instructions",
    "title": "Ordinal Regression Lab Answers",
    "section": "",
    "text": "If you are fitting a model, display the model output in a neatly formatted table. (The tidy and kable functions can help!)\nIf you are creating a plot, use clear labels for all axes, titles, etc.\nIf you are using Github, don’t forget to commit and push your work to to it regularly, at least after each exercise. Write short and informative commit messages. Else, if you are submitting on Canvas, make sure that the version you submit is the latest, and that it runs/knits without any errors.\nWhen you’re done, we should be able to knit the final version of the QMD in your GitHub as a HTML."
  },
  {
    "objectID": "posts/ord_lab_q.html#load-packages",
    "href": "posts/ord_lab_q.html#load-packages",
    "title": "Ordinal Regression Lab Answers",
    "section": "Load packages:",
    "text": "Load packages:\n\n\nCode\nlibrary(tidyverse)\nlibrary(broom)\nlibrary(performance)\nlibrary(ordinal) #clm\nlibrary(car) # anova\nlibrary(ggeffects) #  viz\nlibrary(gofcat) # brant\nlibrary(brms)\nlibrary(emmeans) # contrasts\nlibrary(knitr)"
  },
  {
    "objectID": "posts/ord_lab_q.html#load-data",
    "href": "posts/ord_lab_q.html#load-data",
    "title": "Ordinal Regression Lab Answers",
    "section": "Load data",
    "text": "Load data\n\nMake sure only the top 3 ranks are being used. For some reason, there are missing ranks (my guess is they did not announce rank on TV)\n\n\n\nCode\n# Load data\ngbbo &lt;- read.csv(\"https://raw.githubusercontent.com/suyoghc/PSY-504_Spring-2025/refs/heads/main/Ordinal%20Regression/data/GBBO.csv\")\n\n# Enter code to filter. Think about the data type that would be relevant for Rank\ngbbo_filter &lt;- gbbo %&gt;% \n  filter(Technical.Rank &lt;= 3)"
  },
  {
    "objectID": "posts/ord_lab_q.html#explore",
    "href": "posts/ord_lab_q.html#explore",
    "title": "Ordinal Regression Lab Answers",
    "section": "Explore",
    "text": "Explore\nPlot two figures showing the percentage of bakers in each rank— create one for Gender and Age\n\n\nCode\n# Percentage of bakers in each rank (gender)\ngbbo_gender &lt;- gbbo_filter %&gt;%\n  group_by(Gender, Technical.Rank) %&gt;%\n  summarise(count = n(), .groups = \"drop\") %&gt;%\n  group_by(Gender) %&gt;%\n  mutate(percentage = count / sum(count) * 100)\n\n# Plot for Gender\nggplot(gbbo_gender, aes(x = Technical.Rank, y = percentage, fill = Gender)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Percentage of Bakers by Rank and Gender\",\n       x = \"Technical Rank\",\n       y = \"Percentage\")\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Percentage of bakers in each rank (age)\ngbbo_age &lt;- gbbo_filter %&gt;%\n  group_by(Age, Technical.Rank) %&gt;%\n  summarise(count = n(), .groups = \"drop\") %&gt;%\n  group_by(Age) %&gt;%\n  mutate(percentage = count / sum(count) * 100)\n\n# Plot for Age\nggplot(gbbo_age, aes(x = Age, y = percentage, fill = Technical.Rank)) +\n  geom_histogram(stat = \"identity\") +\n  labs(title = \"Percentage of Bakers by Rank and Age\",\n       x = \"Age\",\n       y = \"Percentage\")"
  },
  {
    "objectID": "posts/ord_lab_q.html#ordinal-analysis",
    "href": "posts/ord_lab_q.html#ordinal-analysis",
    "title": "Ordinal Regression Lab Answers",
    "section": "Ordinal Analysis",
    "text": "Ordinal Analysis\n\n\nCode\ngbbo_filter &lt;- gbbo_filter %&gt;% \n    mutate(Technical.Rank = factor(Technical.Rank, levels = c(1, 2, 3), ordered = TRUE),\n           Gender = factor(Gender))\n\n\n\nConvert input variables to categorical factors as appropriate (done in code above)\n\n\nCode\n## done in code above\n\n\nRun a ordinal logistic regression model against all relevant input variables. Interpret the effects for Gender, Age and Gender*Age (even if they are non-significant).\n\n\nCode\nm &lt;- clm(Technical.Rank ~ Gender + Age + Gender*Age, data = gbbo_filter)\n\n## view a summary of the model\nm %&gt;% \n  tidy()\n\n\n# A tibble: 5 × 6\n  term        estimate std.error statistic p.value coef.type\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;    \n1 1|2         -1.42       0.460    -3.08   0.00205 intercept\n2 2|3          0.00494    0.452     0.0109 0.991   intercept\n3 GenderM     -1.15       0.673    -1.71   0.0876  location \n4 Age         -0.0231     0.0125   -1.85   0.0636  location \n5 GenderM:Age  0.0388     0.0185    2.09   0.0363  location \n\n\nTest if the interaction is warranted\n\n#Hint: You need to create two models with clm(); one with interaction and one without. #Then you compare them using the anova test using anova()\n\n\nCode\nm &lt;- clm(Technical.Rank ~ Gender * Age, data = gbbo_filter)\n\nm0 &lt;- clm(Technical.Rank ~ Gender + Age, data = gbbo_filter)\n\n# Compare the two models using ANOVA\ncomparing &lt;- anova(m, m0)\ncomparing %&gt;%\n  tidy()\n\n\n# A tibble: 6 × 13\n  column       n     mean     sd   median  trimmed   mad      min      max range\n  &lt;chr&gt;    &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;\n1 no.par       2  4.5 e+0  0.707  4.5 e+0  4.5 e+0  0.5   4   e+0  5   e+0  1   \n2 AIC          2  6.85e+2  1.72   6.85e+2  6.85e+2  1.22  6.83e+2  6.86e+2  2.44\n3 logLik       2 -3.38e+2  1.57  -3.38e+2 -3.38e+2  1.11 -3.39e+2 -3.37e+2  2.22\n4 LR.stat      1  4.44e+0 NA      4.44e+0  4.44e+0  0     4.44e+0  4.44e+0  0   \n5 df           1  1   e+0 NA      1   e+0  1   e+0  0     1   e+0  1   e+0  0   \n6 Pr(&gt;Chi…     1  3.52e-2 NA      3.52e-2  3.52e-2  0     3.52e-2  3.52e-2  0   \n# ℹ 3 more variables: skew &lt;dbl&gt;, kurtosis &lt;dbl&gt;, se &lt;dbl&gt;\n\n\n\nUse ggemmeans to create a figure showing the interaction between Gender and Age as a function of rank. Plot predicted probabilities from the model.\n\n\nLatent Visualization\n\n\nCode\nols_clm = MASS::polr(Technical.Rank~Gender*Age, data=gbbo_filter)\n\n\nggeffect(ols_clm, c(\"Age[all]\", \"Gender\"), latent=TRUE) %&gt;% plot()\n\n\n\n\n\n\n\n\n\n\nUse the Brant test to support or reject the hypothesis that the proportional odds assumption holds for your simplified model.\n\n\nCode\nbrant.test(ols_clm)\n\n\n\nBrant Test:\n               chi-sq   df   pr(&gt;chi)\nOmnibus         1.295    3       0.73\nGenderM         0.585    1       0.44\nAge             0.065    1       0.80\nGenderM:Age     0.924    1       0.34\n\nH0: Proportional odds assumption holds\n\n\nbrms\nBelow is a model implementation using the brms package. We will just use the default priors for this. The exercise is to run this code and note your observations. What are salient differences you observe in how the model fitting takes place With respect to the results, how do you compare the results of the model you fit with clm and the one you fit with brms?\n\n\n\nCode\n  ols2_brm = brm(Technical.Rank ~  Gender*Age, data=gbbo_filter, family = cumulative, cores = 4,chains = 4)\n\n\n\nThe conditional_effects function is used to plot predicted probabilities by Gender and Age across each rank.\n\n\nCode\nconditional_effects(ols2_brm, categorical = T)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncheck_predictions from the easystats performance package is used for examining model fit (i.e., does the data fit the model being used?). Run the below code. What do you think?\n\n\n\nCode\ncheck_predictions(ols2_brm)\n\n\n\n\n\n\n\n\n\nYeah I would say the model fit is pretty great"
  },
  {
    "objectID": "posts/ordinal/ord_lab_q.html",
    "href": "posts/ordinal/ord_lab_q.html",
    "title": "Ordinal Regression Lab Answers",
    "section": "",
    "text": "If you are fitting a model, display the model output in a neatly formatted table. (The tidy and kable functions can help!)\nIf you are creating a plot, use clear labels for all axes, titles, etc.\nIf you are using Github, don’t forget to commit and push your work to to it regularly, at least after each exercise. Write short and informative commit messages. Else, if you are submitting on Canvas, make sure that the version you submit is the latest, and that it runs/knits without any errors.\nWhen you’re done, we should be able to knit the final version of the QMD in your GitHub as a HTML."
  },
  {
    "objectID": "posts/ordinal/ord_lab_q.html#instructions",
    "href": "posts/ordinal/ord_lab_q.html#instructions",
    "title": "Ordinal Regression Lab Answers",
    "section": "",
    "text": "If you are fitting a model, display the model output in a neatly formatted table. (The tidy and kable functions can help!)\nIf you are creating a plot, use clear labels for all axes, titles, etc.\nIf you are using Github, don’t forget to commit and push your work to to it regularly, at least after each exercise. Write short and informative commit messages. Else, if you are submitting on Canvas, make sure that the version you submit is the latest, and that it runs/knits without any errors.\nWhen you’re done, we should be able to knit the final version of the QMD in your GitHub as a HTML."
  },
  {
    "objectID": "posts/ordinal/ord_lab_q.html#load-packages",
    "href": "posts/ordinal/ord_lab_q.html#load-packages",
    "title": "Ordinal Regression Lab Answers",
    "section": "Load packages:",
    "text": "Load packages:\n\n\nCode\nlibrary(tidyverse)\nlibrary(broom)\nlibrary(performance)\nlibrary(ordinal) #clm\nlibrary(car) # anova\nlibrary(ggeffects) #  viz\nlibrary(gofcat) # brant\nlibrary(brms)\nlibrary(emmeans) # contrasts\nlibrary(knitr)"
  },
  {
    "objectID": "posts/ordinal/ord_lab_q.html#load-data",
    "href": "posts/ordinal/ord_lab_q.html#load-data",
    "title": "Ordinal Regression Lab Answers",
    "section": "Load data",
    "text": "Load data\n\nMake sure only the top 3 ranks are being used. For some reason, there are missing ranks (my guess is they did not announce rank on TV)\n\n\n\nCode\n# Load data\ngbbo &lt;- read.csv(\"https://raw.githubusercontent.com/suyoghc/PSY-504_Spring-2025/refs/heads/main/Ordinal%20Regression/data/GBBO.csv\")\n\n# Enter code to filter. Think about the data type that would be relevant for Rank\ngbbo_filter &lt;- gbbo %&gt;% \n  filter(Technical.Rank &lt;= 3)"
  },
  {
    "objectID": "posts/ordinal/ord_lab_q.html#explore",
    "href": "posts/ordinal/ord_lab_q.html#explore",
    "title": "Ordinal Regression Lab Answers",
    "section": "Explore",
    "text": "Explore\nPlot two figures showing the percentage of bakers in each rank— create one for Gender and Age\n\n\nCode\n# Percentage of bakers in each rank (gender)\ngbbo_gender &lt;- gbbo_filter %&gt;%\n  group_by(Gender, Technical.Rank) %&gt;%\n  summarise(count = n(), .groups = \"drop\") %&gt;%\n  group_by(Gender) %&gt;%\n  mutate(percentage = count / sum(count) * 100)\n\n# Plot for Gender\nggplot(gbbo_gender, aes(x = Technical.Rank, y = percentage, fill = Gender)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Percentage of Bakers by Rank and Gender\",\n       x = \"Technical Rank\",\n       y = \"Percentage\")\n\n\n\n\n\n\n\n\n\n\n\nCode\n# Percentage of bakers in each rank (age)\ngbbo_age &lt;- gbbo_filter %&gt;%\n  group_by(Age, Technical.Rank) %&gt;%\n  summarise(count = n(), .groups = \"drop\") %&gt;%\n  group_by(Age) %&gt;%\n  mutate(percentage = count / sum(count) * 100)\n\n# Plot for Age\nggplot(gbbo_age, aes(x = Age, y = percentage, fill = Technical.Rank)) +\n  geom_histogram(stat = \"identity\") +\n  labs(title = \"Percentage of Bakers by Rank and Age\",\n       x = \"Age\",\n       y = \"Percentage\")"
  },
  {
    "objectID": "posts/ordinal/ord_lab_q.html#ordinal-analysis",
    "href": "posts/ordinal/ord_lab_q.html#ordinal-analysis",
    "title": "Ordinal Regression Lab Answers",
    "section": "Ordinal Analysis",
    "text": "Ordinal Analysis\n\n\nCode\ngbbo_filter &lt;- gbbo_filter %&gt;% \n    mutate(Technical.Rank = factor(Technical.Rank, levels = c(1, 2, 3), ordered = TRUE),\n           Gender = factor(Gender))\n\n\n\nConvert input variables to categorical factors as appropriate (done in code above)\n\n\nCode\n## done in code above\n\n\nRun a ordinal logistic regression model against all relevant input variables. Interpret the effects for Gender, Age and Gender*Age (even if they are non-significant).\n\n\nCode\nm &lt;- clm(Technical.Rank ~ Gender + Age + Gender*Age, data = gbbo_filter)\n\n## view a summary of the model\nm %&gt;% \n  tidy()\n\n\n# A tibble: 5 × 6\n  term        estimate std.error statistic p.value coef.type\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;    \n1 1|2         -1.42       0.460    -3.08   0.00205 intercept\n2 2|3          0.00494    0.452     0.0109 0.991   intercept\n3 GenderM     -1.15       0.673    -1.71   0.0876  location \n4 Age         -0.0231     0.0125   -1.85   0.0636  location \n5 GenderM:Age  0.0388     0.0185    2.09   0.0363  location \n\n\nTest if the interaction is warranted\n\n#Hint: You need to create two models with clm(); one with interaction and one without. #Then you compare them using the anova test using anova()\n\n\nCode\nm &lt;- clm(Technical.Rank ~ Gender * Age, data = gbbo_filter)\n\nm0 &lt;- clm(Technical.Rank ~ Gender + Age, data = gbbo_filter)\n\n# Compare the two models using ANOVA\ncomparing &lt;- anova(m, m0)\ncomparing %&gt;%\n  tidy()\n\n\n# A tibble: 6 × 13\n  column       n     mean     sd   median  trimmed   mad      min      max range\n  &lt;chr&gt;    &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;\n1 no.par       2  4.5 e+0  0.707  4.5 e+0  4.5 e+0  0.5   4   e+0  5   e+0  1   \n2 AIC          2  6.85e+2  1.72   6.85e+2  6.85e+2  1.22  6.83e+2  6.86e+2  2.44\n3 logLik       2 -3.38e+2  1.57  -3.38e+2 -3.38e+2  1.11 -3.39e+2 -3.37e+2  2.22\n4 LR.stat      1  4.44e+0 NA      4.44e+0  4.44e+0  0     4.44e+0  4.44e+0  0   \n5 df           1  1   e+0 NA      1   e+0  1   e+0  0     1   e+0  1   e+0  0   \n6 Pr(&gt;Chi…     1  3.52e-2 NA      3.52e-2  3.52e-2  0     3.52e-2  3.52e-2  0   \n# ℹ 3 more variables: skew &lt;dbl&gt;, kurtosis &lt;dbl&gt;, se &lt;dbl&gt;\n\n\n\nUse ggemmeans to create a figure showing the interaction between Gender and Age as a function of rank. Plot predicted probabilities from the model.\n\n\nLatent Visualization\n\n\nCode\nols_clm = MASS::polr(Technical.Rank~Gender*Age, data=gbbo_filter)\n\n\nggeffect(ols_clm, c(\"Age[all]\", \"Gender\"), latent=TRUE) %&gt;% plot()\n\n\n\n\n\n\n\n\n\n\nUse the Brant test to support or reject the hypothesis that the proportional odds assumption holds for your simplified model.\n\n\nCode\nbrant.test(ols_clm)\n\n\n\nBrant Test:\n               chi-sq   df   pr(&gt;chi)\nOmnibus         1.295    3       0.73\nGenderM         0.585    1       0.44\nAge             0.065    1       0.80\nGenderM:Age     0.924    1       0.34\n\nH0: Proportional odds assumption holds\n\n\nbrms\nBelow is a model implementation using the brms package. We will just use the default priors for this. The exercise is to run this code and note your observations. What are salient differences you observe in how the model fitting takes place With respect to the results, how do you compare the results of the model you fit with clm and the one you fit with brms?\n\n\n\nCode\n  ols2_brm = brm(Technical.Rank ~  Gender*Age, data=gbbo_filter, family = cumulative, cores = 4,chains = 4)\n\n\n\nThe conditional_effects function is used to plot predicted probabilities by Gender and Age across each rank.\n\n\nCode\nconditional_effects(ols2_brm, categorical = T)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncheck_predictions from the easystats performance package is used for examining model fit (i.e., does the data fit the model being used?). Run the below code. What do you think?\n\n\n\nCode\ncheck_predictions(ols2_brm)\n\n\n\n\n\n\n\n\n\nYeah I would say the model fit is pretty great"
  },
  {
    "objectID": "posts/Lab4_multinom_Questions-1.html",
    "href": "posts/Lab4_multinom_Questions-1.html",
    "title": "Lab 4 - Multinomial Regression - Questions",
    "section": "",
    "text": "Lab Goal: Predict voting frequency using demographic variables Data source: FiveThirtyEight “Why Many Americans Don’t Vote” survey Method: Multinomial logistic regression"
  },
  {
    "objectID": "posts/Lab4_multinom_Questions-1.html#data",
    "href": "posts/Lab4_multinom_Questions-1.html#data",
    "title": "Lab 4 - Multinomial Regression - Questions",
    "section": "Data",
    "text": "Data\nThe data for this assignment comes from an online Ipsos survey that was conducted for the FiveThirtyEight article “Why Many Americans Don’t Vote”. You can read more about the survey design and respondents in the README of the GitHub repo for the data.\nRespondents were asked a variety of questions about their political beliefs, thoughts on multiple issues, and voting behavior. We will focus on using the demographic variables and someone’s party identification to understand whether a person is a probable voter.\nThe variables we’ll focus on were (definitions from the codebook in data set GitHub repo):\n\nppage: Age of respondent\neduc: Highest educational attainment category.\n\nrace: Race of respondent, census categories. Note: all categories except Hispanic were non-Hispanic.\ngender: Gender of respondent\nincome_cat: Household income category of respondent\nQ30: Response to the question “Generally speaking, do you think of yourself as a…”\n\n1: Republican\n2: Democrat\n3: Independent\n4: Another party, please specify\n5: No preference\n-1: No response\n\nvoter_category: past voting behavior:\n\nalways: respondent voted in all or all-but-one of the elections they were eligible in\nsporadic: respondent voted in at least two, but fewer than all-but-one of the elections they were eligible in\nrarely/never: respondent voted in 0 or 1 of the elections they were eligible in\n\n\nYou can read in the data directly from the GitHub repo:\n\n\nCode\nlibrary(nnet)\nlibrary(car)\nlibrary(tidyverse)\nlibrary(emmeans)\nlibrary(ggeffects)\nlibrary(knitr)\nlibrary(patchwork)\nlibrary(broom)\nlibrary(parameters)\nlibrary(easystats)\n\n\n\n\nCode\nvoter_data &lt;- read.csv(\"https://raw.githubusercontent.com/fivethirtyeight/data/master/non-voters/nonvoters_data.csv\")"
  },
  {
    "objectID": "posts/Lab4_multinom_Questions-1.html#lrt",
    "href": "posts/Lab4_multinom_Questions-1.html#lrt",
    "title": "Lab 4 - Multinomial Regression - Questions",
    "section": "LRT",
    "text": "LRT\n\n\nCode\ncar::Anova(model_party) %&gt;% \n  kable()\n\n\n\n\n\n\nLR Chisq\nDf\nPr(&gt;Chisq)\n\n\n\n\ncenter_age\n638.297213\n2\n0.000000\n\n\nrace\n52.651508\n6\n0.000000\n\n\ngender\n6.027914\n2\n0.049097\n\n\nincome_cat\n67.721466\n6\n0.000000\n\n\neduc\n154.136763\n4\n0.000000\n\n\npol_ident_new\n153.843978\n6\n0.000000\n\n\n\n\n\n\nRun the full model and report overall significance of each of the terms.\n\nEach of the terms are p &lt; .001 (very, very close to 0)\n\n\nCode\nmodel_party %&gt;%\n  tidy()\n\n\n# A tibble: 28 × 6\n   y.level  term                     estimate std.error statistic  p.value\n   &lt;chr&gt;    &lt;chr&gt;                       &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n 1 sporadic (Intercept)                1.73     0.136      12.7   4.33e-37\n 2 sporadic center_age                 0.0457   0.00232    19.7   5.31e-86\n 3 sporadic raceHispanic               0.0402   0.128       0.314 7.53e- 1\n 4 sporadic raceOther/Mixed           -0.332    0.159      -2.09  3.66e- 2\n 5 sporadic raceWhite                 -0.0775   0.108      -0.719 4.72e- 1\n 6 sporadic genderMale                -0.0901   0.0722     -1.25  2.12e- 1\n 7 sporadic income_cat$40-75k         -0.0738   0.111      -0.662 5.08e- 1\n 8 sporadic income_cat$75-125k         0.0125   0.107       0.117 9.07e- 1\n 9 sporadic income_catLess than $40k  -0.588    0.114      -5.17  2.37e- 7\n10 sporadic educHigh school or less   -0.853    0.0974     -8.76  1.94e-18\n# ℹ 18 more rows"
  },
  {
    "objectID": "posts/Lab4_multinom_Questions-1.html#marginal-effects-political-group---emmeans",
    "href": "posts/Lab4_multinom_Questions-1.html#marginal-effects-political-group---emmeans",
    "title": "Lab 4 - Multinomial Regression - Questions",
    "section": "Marginal Effects Political Group - Emmeans",
    "text": "Marginal Effects Political Group - Emmeans\n\n\nCode\n#Get estimated marginal means from the model\n\n#using \nmultinomial_analysis &lt;- emmeans(model_party, ~ pol_ident_new|voter_category)\n\ncoefs = contrast(regrid(multinomial_analysis, \"log\"),\"trt.vs.ctrl1\",  by=\"pol_ident_new\")\n# you can add a parameter to the above command, ref = newbaseline, if you want to change baseline\n\nupdate(coefs, by = \"contrast\") %&gt;% \n  kable(format = \"markdown\", digits = 3)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncontrast\npol_ident_new\nestimate\nSE\ndf\nt.ratio\np.value\n\n\n\n\nsporadic - (rarely/never)\nDemocrat\n0.961\n0.070\n28\n13.722\n0.000\n\n\nalways - (rarely/never)\nDemocrat\n0.480\n0.074\n28\n6.498\n0.000\n\n\nsporadic - (rarely/never)\nIndependent\n0.591\n0.077\n28\n7.643\n0.000\n\n\nalways - (rarely/never)\nIndependent\n-0.049\n0.084\n28\n-0.590\n0.900\n\n\nsporadic - (rarely/never)\nOther\n0.078\n0.087\n28\n0.902\n0.747\n\n\nalways - (rarely/never)\nOther\n-0.835\n0.110\n28\n-7.577\n0.000\n\n\nsporadic - (rarely/never)\nRepublican\n0.883\n0.084\n28\n10.469\n0.000\n\n\nalways - (rarely/never)\nRepublican\n0.327\n0.089\n28\n3.672\n0.004"
  },
  {
    "objectID": "posts/Lab4_multinom_Questions-1.html#marginal-effects-of-education---emmeans",
    "href": "posts/Lab4_multinom_Questions-1.html#marginal-effects-of-education---emmeans",
    "title": "Lab 4 - Multinomial Regression - Questions",
    "section": "Marginal Effects of Education - Emmeans",
    "text": "Marginal Effects of Education - Emmeans\n\n\nCode\n#Enter code\n#using \nmultinomial_analysis &lt;- emmeans(model_party, ~ educ|voter_category)\n\ncoefs = contrast(regrid(multinomial_analysis, \"log\"),\"trt.vs.ctrl1\",  by=\"educ\")\n# you can add a parameter to the above command, ref = newbaseline, if you want to change baseline\n\nupdate(coefs, by = \"contrast\") %&gt;% \n  kable(format = \"markdown\", digits = 3)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncontrast\neduc\nestimate\nSE\ndf\nt.ratio\np.value\n\n\n\n\nsporadic - (rarely/never)\nCollege\n0.986\n0.076\n28\n12.904\n0.000\n\n\nalways - (rarely/never)\nCollege\n0.477\n0.080\n28\n5.960\n0.000\n\n\nsporadic - (rarely/never)\nHigh school or less\n0.187\n0.069\n28\n2.705\n0.031\n\n\nalways - (rarely/never)\nHigh school or less\n-0.711\n0.080\n28\n-8.883\n0.000\n\n\nsporadic - (rarely/never)\nSome college\n0.707\n0.074\n28\n9.512\n0.000\n\n\nalways - (rarely/never)\nSome college\n0.167\n0.079\n28\n2.114\n0.112\n\n\n\n\n\n\nNext, plot the predicted probabilities of voter category as a function of Age and Party ID\n\n\n\nCode\npredictions &lt;- ggemmeans(model_party, terms = c(\"center_age\", \"pol_ident_new\"))\n\n# Create the plot with facets for each party ID category.\nggplot(predictions, aes(x = x, y = predicted, fill = response.level)) +\n  geom_area() +\n  geom_rug(sides = \"b\", position = \"jitter\", alpha = 0.5) +\n  labs(\n    x = \"\\nAge\",\n    y = \"Predicted Probability\\n\",\n    title = \"Predicted Probabilities of Voting Frequency by Age and Party ID\"\n  ) +\n  facet_wrap(~ group, labeller = label_both) +  # Facet by Party ID\n  scale_fill_manual(\n    name = NULL,\n    values = c(\"always\" = \"#F6B533\", \"sporadic\" = \"#D07EA2\", \"rarely/never\" = \"#9854F7\"),\n    labels = c(\"RARELY OR NEVER VOTE\", \"SOMETIMES VOTE\", \"ALMOST ALWAYS VOTE\"),\n    breaks = c(\"rarely/never\", \"sporadic\", \"always\")\n  )\n\n\n\n\n\n\n\n\n\nRepublicans are least likely to rarely/never vote.\nPlot predicted probabilities as a function of education and voting frequency.\n\n\nCode\npredictions &lt;- ggemmeans(model_party, terms = c(\"center_age\", \"educ\"))\n\n# Create the plot with facets for each party ID category.\nggplot(predictions, aes(x = x, y = predicted, fill = response.level)) +\n  geom_area() +\n  geom_rug(sides = \"b\", position = \"jitter\", alpha = 0.5) +\n  labs(\n    x = \"\\nEducation\",\n    y = \"Predicted Probability\\n\",\n    title = \"Predicted Probabilities of Voting Frequency by Education and Party ID\"\n  ) +\n  facet_wrap(~ group, labeller = label_both) +  # Facet by Party ID\n  scale_fill_manual(\n    name = NULL,\n    values = c(\"always\" = \"#F6B533\", \"sporadic\" = \"#D07EA2\", \"rarely/never\" = \"#9854F7\"),\n    labels = c(\"RARELY OR NEVER VOTE\", \"SOMETIMES VOTE\", \"ALMOST ALWAYS VOTE\"),\n    breaks = c(\"rarely/never\", \"sporadic\", \"always\")\n  )\n\n\n\n\n\n\n\n\n\nThoe with only a high school education or less are less likely to consistenly engage with voting vbehaviors, as they are most likely to “rarely or never vote,” and least likely to “almost alway vote”\n\nDifferences between political groups and voting behavior - Emmeans\n\n\nCode\nmulti_an &lt;- emmeans(model_party, ~ pol_ident_new|voter_category)\n\ncoefs = contrast(regrid(multi_an, \"log\"),\"trt.vs.ctrl1\",  by=\"pol_ident_new\")\n\nupdate(coefs, by = \"contrast\") %&gt;% \n  kable(format = \"markdown\", digits = 3)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncontrast\npol_ident_new\nestimate\nSE\ndf\nt.ratio\np.value\n\n\n\n\nsporadic - (rarely/never)\nDemocrat\n0.961\n0.070\n28\n13.722\n0.000\n\n\nalways - (rarely/never)\nDemocrat\n0.480\n0.074\n28\n6.498\n0.000\n\n\nsporadic - (rarely/never)\nIndependent\n0.591\n0.077\n28\n7.643\n0.000\n\n\nalways - (rarely/never)\nIndependent\n-0.049\n0.084\n28\n-0.590\n0.900\n\n\nsporadic - (rarely/never)\nOther\n0.078\n0.087\n28\n0.902\n0.747\n\n\nalways - (rarely/never)\nOther\n-0.835\n0.110\n28\n-7.577\n0.000\n\n\nsporadic - (rarely/never)\nRepublican\n0.883\n0.084\n28\n10.469\n0.000\n\n\nalways - (rarely/never)\nRepublican\n0.327\n0.089\n28\n3.672\n0.004\n\n\n\n\n\nCode\n# get difference between yes-no and fair-excellent\ncontrast(coefs, \"revpairwise\", by = \"contrast\") %&gt;%\n  kable(format = \"markdown\", digits = 3)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncontrast1\ncontrast\nestimate\nSE\ndf\nt.ratio\np.value\n\n\n\n\nIndependent - Democrat\nsporadic - (rarely/never)\n-0.370\n0.094\n28\n-3.933\n0.003\n\n\nOther - Democrat\nsporadic - (rarely/never)\n-0.883\n0.103\n28\n-8.578\n0.000\n\n\nOther - Independent\nsporadic - (rarely/never)\n-0.513\n0.107\n28\n-4.807\n0.000\n\n\nRepublican - Democrat\nsporadic - (rarely/never)\n-0.078\n0.099\n28\n-0.787\n0.860\n\n\nRepublican - Independent\nsporadic - (rarely/never)\n0.292\n0.099\n28\n2.965\n0.029\n\n\nRepublican - Other\nsporadic - (rarely/never)\n0.805\n0.109\n28\n7.404\n0.000\n\n\nIndependent - Democrat\nalways - (rarely/never)\n-0.529\n0.101\n28\n-5.255\n0.000\n\n\nOther - Democrat\nalways - (rarely/never)\n-1.315\n0.125\n28\n-10.508\n0.000\n\n\nOther - Independent\nalways - (rarely/never)\n-0.786\n0.129\n28\n-6.072\n0.000\n\n\nRepublican - Democrat\nalways - (rarely/never)\n-0.153\n0.104\n28\n-1.470\n0.468\n\n\nRepublican - Independent\nalways - (rarely/never)\n0.376\n0.104\n28\n3.605\n0.006\n\n\nRepublican - Other\nalways - (rarely/never)\n1.162\n0.130\n28\n8.969\n0.000\n\n\n\n\n\n\n\nDifferences between education level and voting behavior - Emmeans\nLast part of the assignment: Interpret the results from running the following code for your model\n\n\nCode\nmulti_an &lt;- emmeans(model_party, ~ educ|voter_category)\n\ncoefs = contrast(regrid(multi_an, \"log\"),\"trt.vs.ctrl1\",  by=\"educ\")\n\nupdate(coefs, by = \"contrast\") %&gt;% \n  kable(format = \"markdown\", digits = 3)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncontrast\neduc\nestimate\nSE\ndf\nt.ratio\np.value\n\n\n\n\nsporadic - (rarely/never)\nCollege\n0.986\n0.076\n28\n12.904\n0.000\n\n\nalways - (rarely/never)\nCollege\n0.477\n0.080\n28\n5.960\n0.000\n\n\nsporadic - (rarely/never)\nHigh school or less\n0.187\n0.069\n28\n2.705\n0.031\n\n\nalways - (rarely/never)\nHigh school or less\n-0.711\n0.080\n28\n-8.883\n0.000\n\n\nsporadic - (rarely/never)\nSome college\n0.707\n0.074\n28\n9.512\n0.000\n\n\nalways - (rarely/never)\nSome college\n0.167\n0.079\n28\n2.114\n0.112\n\n\n\n\n\nCode\n# get difference between yes-no and fair-excellent\ncontrast(coefs, \"revpairwise\", by = \"contrast\") %&gt;%\n  kable(format = \"markdown\", digits = 3)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncontrast1\ncontrast\nestimate\nSE\ndf\nt.ratio\np.value\n\n\n\n\nHigh school or less - College\nsporadic - (rarely/never)\n-0.799\n0.095\n28\n-8.416\n0.000\n\n\nSome college - College\nsporadic - (rarely/never)\n-0.278\n0.092\n28\n-3.030\n0.014\n\n\nSome college - High school or less\nsporadic - (rarely/never)\n0.520\n0.088\n28\n5.920\n0.000\n\n\nHigh school or less - College\nalways - (rarely/never)\n-1.188\n0.104\n28\n-11.394\n0.000\n\n\nSome college - College\nalways - (rarely/never)\n-0.310\n0.097\n28\n-3.207\n0.009\n\n\nSome college - High school or less\nalways - (rarely/never)\n0.878\n0.098\n28\n8.995\n0.000\n\n\n\n\n\nEnter your interpretation here:\nGenerally, the more education one has the more likely one is to vote and to do so consistently"
  },
  {
    "objectID": "posts/poisson_lab_questions-1.html",
    "href": "posts/poisson_lab_questions-1.html",
    "title": "Lab 5 - Poisson - Questions",
    "section": "",
    "text": "To complete this lab:\nlibrary(MASS)\nlibrary(tidyverse)\nlibrary(emmeans)\nlibrary(ggeffects)\nlibrary(easystats)\nlibrary(performance)\nlibrary(knitr)\nlibrary(tidyverse)\n\ndata &lt;- read_delim(\"https://raw.githubusercontent.com/jgeller112/psy504-advanced-stats/main/slides/Poisson/data/2010.csv\")\nlibrary(naniar)\n\ndata_pos &lt;- data %&gt;%\n  dplyr::select(wwwhr, wordsum, age, sex, reliten, polviews, wrkhome) %&gt;%\nreplace_with_na(.,\n             replace = list(wwwhr = c(-1, 998, 999),\n                          wordsum = c(-1, 99),\n                          reliten = c(0, 8, 9), \n             polviews = c(0, 8, 9), \n             wrkhome = c(0,8,9), \n             age=c(0, 98, 99)))\nQ: Can you explain what might be going on in the above code?\nA: It seems like we are using dplyr to replace some codes (like 0, 8, 9, -1, 99, etc) with NAs.\nQ: The next step in data cleaning would be to ensure that the data in your code are aligned with the description/ usage context of the variables\ndata_pos &lt;- data_pos %&gt;% \n  mutate(sex = recode(sex, `-1` = \"Male\", `1` = \"Female\"))\n\ndata_pos$sex &lt;- as.factor(data_pos$sex)\n\ndata_pos &lt;- data_pos %&gt;% \n    mutate(reliten_recode = factor(reliten, levels = c(1, 2, 3, 4, 5), ordered = TRUE))"
  },
  {
    "objectID": "posts/poisson_lab_questions-1.html#missingness",
    "href": "posts/poisson_lab_questions-1.html#missingness",
    "title": "Lab 5 - Poisson - Questions",
    "section": "Missingness",
    "text": "Missingness\n\ndata_pos %&gt;%\n  dplyr::select(reliten, reliten_recode)\n\n# A tibble: 2,044 × 2\n   reliten reliten_recode\n     &lt;dbl&gt; &lt;ord&gt;         \n 1       1 1             \n 2       4 4             \n 3       1 1             \n 4       1 1             \n 5       1 1             \n 6       4 4             \n 7       3 3             \n 8       1 1             \n 9       1 1             \n10       1 1             \n# ℹ 2,034 more rows\n\nlibrary(skimr)\nskimr::skim(data_pos)\n\n\nData summary\n\n\nName\ndata_pos\n\n\nNumber of rows\n2044\n\n\nNumber of columns\n8\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\nfactor\n2\n\n\nnumeric\n6\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: factor\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nordered\nn_unique\ntop_counts\n\n\n\n\nsex\n0\n1.00\nFALSE\n2\nMal: 1153, Fem: 891\n\n\nreliten_recode\n99\n0.95\nTRUE\n4\n2: 747, 1: 707, 4: 363, 3: 128\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nwwwhr\n996\n0.51\n9.79\n13.41\n0\n2\n5\n14\n168\n▇▁▁▁▁\n\n\nwordsum\n657\n0.68\n6.03\n2.07\n0\n5\n6\n7\n10\n▁▃▇▅▂\n\n\nage\n3\n1.00\n47.97\n17.68\n18\n33\n47\n61\n89\n▇▇▇▅▃\n\n\nreliten\n99\n0.95\n2.08\n1.08\n1\n1\n2\n3\n4\n▇▇▁▂▃\n\n\npolviews\n71\n0.97\n4.08\n1.46\n1\n3\n4\n5\n7\n▃▂▇▃▅\n\n\nwrkhome\n882\n0.57\n2.26\n1.72\n1\n1\n1\n4\n6\n▇▁▁▂▁"
  },
  {
    "objectID": "posts/poisson_lab_questions-1.html#fit-a-poisson-model-to-the-data.",
    "href": "posts/poisson_lab_questions-1.html#fit-a-poisson-model-to-the-data.",
    "title": "Lab 5 - Poisson - Questions",
    "section": "Fit a Poisson model to the data.",
    "text": "Fit a Poisson model to the data.\n\nThe number of hours per week that a person spends on the Internet (“WWWHR”) will\nbe predicted by their vocabulary (“WORDSUM”), age (“AGE”), sex (“SEX”), religiosity\n(“RELITEN”), political orientation (“POLVIEWS”), and how often they work from home\n(“WRKHOME”).\n\n\nmodel &lt;- glm(wwwhr ~ wordsum + age + sex + reliten_recode + polviews + wrkhome,                  data = data_pos, \n                 family = poisson(link = \"log\"))\n\nlibrary(broom)\nmodel %&gt;%\n  tidy()\n\n# A tibble: 9 × 5\n  term             estimate std.error statistic   p.value\n  &lt;chr&gt;               &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;\n1 (Intercept)        2.36     0.0737      32.0  9.60e-225\n2 wordsum            0.102    0.00781     13.1  6.08e- 39\n3 age               -0.0166   0.00109    -15.3  1.04e- 52\n4 sexMale           -0.250    0.0266      -9.42 4.55e- 21\n5 reliten_recode.L   0.457    0.0295      15.5  2.77e- 54\n6 reliten_recode.Q  -0.0465   0.0351      -1.32 1.86e-  1\n7 reliten_recode.C   0.103    0.0413       2.50 1.24e-  2\n8 polviews          -0.0326   0.00977     -3.34 8.31e-  4\n9 wrkhome            0.0787   0.00766     10.3  9.93e- 25"
  },
  {
    "objectID": "posts/poisson_lab_questions-1.html#carry-out-model-checking",
    "href": "posts/poisson_lab_questions-1.html#carry-out-model-checking",
    "title": "Lab 5 - Poisson - Questions",
    "section": "Carry out model checking",
    "text": "Carry out model checking\nHint: performance package has the function you’re looking for\n\ncheck_model(model,plot = T)"
  },
  {
    "objectID": "posts/poisson_lab_questions-1.html#find-any-outliers",
    "href": "posts/poisson_lab_questions-1.html#find-any-outliers",
    "title": "Lab 5 - Poisson - Questions",
    "section": "Find any outliers",
    "text": "Find any outliers\n\n#Q &lt;- quantile(data_pos$wwwhr, probs=c(.25, .75), na.rm = T)\n#iqr &lt;- IQR(data_pos$wwwhr, na.rm = T)\n\n#up &lt;-  Q[2]+1.5*iqr # Upper Range  \n#low&lt;- Q[1]-1.5*iqr # Lower Range\n\n#subset(data_pos, data_pos$wwwhr &gt;= (Q[1] - 1.5*iqr) & data_pos$wwwhr &lt;= (Q[2]+1.5*iqr))\n\n# I tried this method above and it cut almost 1000 observations. Any thoughts to why this happened? I'm confused...\n\nstats &lt;- data_pos %&gt;%\n  summarize(mean_wwwhr = mean(wwwhr, na.rm = TRUE),\n            sd_wwwhr = sd(wwwhr, na.rm = TRUE))\n\ndata_pos_filtered &lt;- data_pos %&gt;%\n  filter(wwwhr &gt;= (stats$mean_wwwhr - 3 * stats$sd_wwwhr) & \n         wwwhr &lt;= (stats$mean_wwwhr + 3 * stats$sd_wwwhr))\n\n\n\ncheck_outliers(model)\n\n3 outliers detected: cases 72, 156, 363.\n- Based on the following method and threshold: cook (0.9).\n- For variable: (Whole model)."
  },
  {
    "objectID": "posts/poisson_lab_questions-1.html#refit-the-model-after-excluding-outliers",
    "href": "posts/poisson_lab_questions-1.html#refit-the-model-after-excluding-outliers",
    "title": "Lab 5 - Poisson - Questions",
    "section": "Refit the model after excluding outliers",
    "text": "Refit the model after excluding outliers\n\n  new_model &lt;- glm(wwwhr ~ wordsum + age + sex + reliten_recode + polviews + wrkhome,                  data = data_pos_filtered, \n                 family = poisson(link = \"log\"))\n\n\nmodel_parameters(new_model) %&gt;%\n  print_html()\n\n\n\n\n\n\n\nParameter\nCoefficient\nSE\n95% CI\nz\np\n\n\n\n\n(Intercept)\n2.10\n0.08\n(1.95, 2.26)\n26.91\n&lt; .001\n\n\nwordsum\n0.09\n8.31e-03\n(0.08, 0.11)\n11.40\n&lt; .001\n\n\nage\n-0.01\n1.14e-03\n(-0.01, -9.04e-03)\n-9.89\n&lt; .001\n\n\nsex (Male)\n-0.14\n0.03\n(-0.19, -0.08)\n-4.85\n&lt; .001\n\n\nreliten recode (linear)\n0.35\n0.03\n(0.29, 0.41)\n11.35\n&lt; .001\n\n\nreliten recode (quadratic)\n-0.13\n0.04\n(-0.20, -0.06)\n-3.53\n&lt; .001\n\n\nreliten recode (cubic)\n0.03\n0.04\n(-0.05, 0.12)\n0.80\n0.425\n\n\npolviews\n-0.02\n0.01\n(-0.04, -8.11e-05)\n-1.97\n0.049\n\n\nwrkhome\n0.04\n8.33e-03\n(0.02, 0.06)\n4.79\n&lt; .001\n\n\n\n\n\n\n\n\n\n\n\n\n\nCheck for Overdispersion\nHint: performance package has the function you’re looking for\n\ncheck_model(new_model,plot = T)\n\n\n\n\n\n\n\n\nWhat do you notice? And what’s a good next step forward? Can there be another model class that can fit the data? If so, fit this model to the data.\nI notice that we no longer have an outlier problem, but we do have an overdispersion problem. The next step would proably use a negative binomial regression model.\n\ncheck_overdispersion(new_model)\n\n# Overdispersion test\n\n       dispersion ratio =   10.644\n  Pearson's Chi-Squared = 6237.607\n                p-value =  &lt; 0.001\n\n\n\n  binom_model &lt;- glm.nb(wwwhr ~ wordsum + age + sex + reliten_recode + polviews + wrkhome, data = data_pos_filtered)\n\nsummary(binom_model)\n\n\nCall:\nglm.nb(formula = wwwhr ~ wordsum + age + sex + reliten_recode + \n    polviews + wrkhome, data = data_pos_filtered, init.theta = 1.040080703, \n    link = log)\n\nCoefficients:\n                  Estimate Std. Error z value Pr(&gt;|z|)    \n(Intercept)       2.116929   0.238400   8.880  &lt; 2e-16 ***\nwordsum           0.100891   0.025398   3.972 7.11e-05 ***\nage              -0.012406   0.003439  -3.608 0.000309 ***\nsexMale          -0.105146   0.087533  -1.201 0.229667    \nreliten_recode.L  0.343975   0.095018   3.620 0.000294 ***\nreliten_recode.Q -0.106312   0.113643  -0.935 0.349533    \nreliten_recode.C  0.037056   0.134226   0.276 0.782494    \npolviews         -0.023980   0.032425  -0.740 0.459566    \nwrkhome           0.035173   0.026443   1.330 0.183483    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n(Dispersion parameter for Negative Binomial(1.0401) family taken to be 1)\n\n    Null deviance: 720.55  on 594  degrees of freedom\nResidual deviance: 661.65  on 586  degrees of freedom\n  (440 observations deleted due to missingness)\nAIC: 3808.7\n\nNumber of Fisher Scoring iterations: 1\n\n              Theta:  1.0401 \n          Std. Err.:  0.0664 \n\n 2 x log-likelihood:  -3788.6810 \n\nmodel_parameters(binom_model) %&gt;%\n  print_html()\n\n\n\n\n\n\n\nParameter\nCoefficient\nSE\n95% CI\nz\np\n\n\n\n\n(Intercept)\n2.12\n0.24\n(1.65, 2.59)\n8.88\n&lt; .001\n\n\nwordsum\n0.10\n0.03\n(0.05, 0.15)\n3.97\n&lt; .001\n\n\nage\n-0.01\n3.44e-03\n(-0.02, -5.46e-03)\n-3.61\n&lt; .001\n\n\nsex (Male)\n-0.11\n0.09\n(-0.28, 0.07)\n-1.20\n0.230\n\n\nreliten recode (linear)\n0.34\n0.10\n(0.16, 0.53)\n3.62\n&lt; .001\n\n\nreliten recode (quadratic)\n-0.11\n0.11\n(-0.33, 0.11)\n-0.94\n0.350\n\n\nreliten recode (cubic)\n0.04\n0.13\n(-0.24, 0.29)\n0.28\n0.782\n\n\npolviews\n-0.02\n0.03\n(-0.09, 0.04)\n-0.74\n0.460\n\n\nwrkhome\n0.04\n0.03\n(-0.02, 0.09)\n1.33\n0.183"
  },
  {
    "objectID": "posts/poisson_lab_questions-1.html#which-one-is-better--your-earlier-model-or-later-model",
    "href": "posts/poisson_lab_questions-1.html#which-one-is-better--your-earlier-model-or-later-model",
    "title": "Lab 5 - Poisson - Questions",
    "section": "Which one is better- your earlier model, or later model?",
    "text": "Which one is better- your earlier model, or later model?\nThe negative binomial model (so the later model) has a much lower AIC, so we can conclude the model fits the data better than the poisson\n\ntest_likelihoodratio(new_model, binom_model)\n\n# Likelihood-Ratio-Test (LRT) for Model Comparison (ML-estimator)\n\nName        |  Model | df | df_diff |    Chi2 |      p\n------------------------------------------------------\nnew_model   |    glm |  9 |         |         |       \nbinom_model | negbin | 10 |       1 | 3309.46 | &lt; .001\n\nAIC(new_model, binom_model)\n\n            df      AIC\nnew_model    9 7116.145\nbinom_model 10 3808.681"
  },
  {
    "objectID": "posts/poisson_lab_questions-1.html#what-is-zero-inflation-is-there-zero-inflation-in-your-chosen-model",
    "href": "posts/poisson_lab_questions-1.html#what-is-zero-inflation-is-there-zero-inflation-in-your-chosen-model",
    "title": "Lab 5 - Poisson - Questions",
    "section": "What is zero inflation? Is there zero-inflation in your chosen model?",
    "text": "What is zero inflation? Is there zero-inflation in your chosen model?\nWhen there are too many zeros in your data, that can bias your result. There is indeed zero inflation in my chosen model.\n\nperformance::check_zeroinflation(binom_model)\n\n# Check for zero-inflation\n\n   Observed zeros: 40\n  Predicted zeros: 63\n            Ratio: 1.57\n\n\n\nLog LambdaMean Count\n\n\n\nlambda_poisson &lt;- predict(new_model, type = \"response\")\nlambda_negbinom &lt;- predict(binom_model, type = \"response\")\n\n# Log transform the lambda values\nlog_lambda_poisson &lt;- log(lambda_poisson)\nlog_lambda_negbinom &lt;- log(lambda_negbinom)\n\n# Output the log lambda values for a subset of the data\nhead(data.frame(log_lambda_poisson, log_lambda_negbinom))\n\n   log_lambda_poisson log_lambda_negbinom\n1            2.075745            2.079081\n2            2.858883            2.913070\n4            2.192097            2.220856\n8            2.263431            2.252398\n9            2.064265            2.030755\n12           2.549028            2.592963\n\n\n\n\n\npredicted_counts_poisson &lt;- predict(new_model, type = \"response\")\npredicted_counts_negbinom &lt;- predict(binom_model, type = \"response\")\n\n# Calculate the mean of predicted counts for each model\nmean_count_poisson &lt;- mean(predicted_counts_poisson, na.rm = TRUE)\nmean_count_negbinom &lt;- mean(predicted_counts_negbinom, na.rm = TRUE)\n\n# Output the mean counts\nmean_count_poisson\n\n[1] 8.821849\n\nmean_count_negbinom\n\n[1] 8.836638"
  },
  {
    "objectID": "posts/poisson_lab_questions-1.html#report-your-conclusions",
    "href": "posts/poisson_lab_questions-1.html#report-your-conclusions",
    "title": "Lab 5 - Poisson - Questions",
    "section": "Report your conclusions",
    "text": "Report your conclusions\nIt seems like the negative binomial model outputs slightly higher mean counts and log lambdas than the poisson distribution. It seems like we should favor the negative binomial outputs over the poisson.\nWe initally fitted a poisson model to predict the number of hours per week that a person spends on the Internet (“WWWHR”) using their vocabulary (“WORDSUM”), age (“AGE”), sex (“SEX”), religiosity (“RELITEN”), political orientation (“POLVIEWS”), and how often they work from home (“WRKHOME”) as fixed effects. We then fit a negative binomial model instead because there were too many outliers, in this model, only the effects of wordsum, age, and religiosity (linear) were significant but not those of sex, polviews, or working from home."
  },
  {
    "objectID": "posts/MLM_Intro_Questions.html",
    "href": "posts/MLM_Intro_Questions.html",
    "title": "Intro to MLM Exercise/Walkthrough",
    "section": "",
    "text": "New Packages!\n\n\n\n\n\nThese are the main packages we’re going to use in this block. It might make sense to install them now if you do not have them already\n\ntidyverse : for organising data\n\nlme4 : for fitting generalised linear mixed effects models\nbroom.mixed : tidying methods for mixed models\neffects : for tabulating and graphing effects in linear models\nlmerTest: for quick p-values from mixed models\nparameters: various inferential methods for mixed models"
  },
  {
    "objectID": "posts/MLM_Intro_Questions.html#footnotes",
    "href": "posts/MLM_Intro_Questions.html#footnotes",
    "title": "Intro to MLM Exercise/Walkthrough",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nImage sources:http://tophatsasquatch.com/2012-tmnt-classics-action-figures/https://www.dezeen.com/2016/02/01/barbie-dolls-fashionista-collection-mattel-new-body-types/https://www.wish.com/product/5da9bc544ab36314cfa7f70chttps://www.worldwideshoppingmall.co.uk/toys/jumbo-farm-animals.asphttps://www.overstock.com/Sports-Toys/NJ-Croce-Scooby-Doo-5pc.-Bendable-Figure-Set-with-Scooby-Doo-Shaggy-Daphne-Velma-and-Fred/28534567/product.htmlhttps://tvtropes.org/pmwiki/pmwiki.php/Toys/Furbyhttps://www.fun.com/toy-story-4-figure-4-pack.htmlhttps://www.johnlewis.com/lego-minifigures-71027-series-20-pack/p5079461↩︎"
  },
  {
    "objectID": "posts/Bayes_Lab_1.html",
    "href": "posts/Bayes_Lab_1.html",
    "title": "Bayes and Penguins",
    "section": "",
    "text": "Here is a worksheet and assignment that combines Bayes (brms) with tidyverse tools. The focus is on the essentials when it comes to simple linear regression with brms.\nPlease read and run through this worksheet and answer the conceptual questions that are interleaved within them. At the end of each part, is a coding exercise based on the material you’ve read until then."
  },
  {
    "objectID": "posts/Bayes_Lab_1.html#packages-and-data",
    "href": "posts/Bayes_Lab_1.html#packages-and-data",
    "title": "Bayes and Penguins",
    "section": "Packages and data",
    "text": "Packages and data\nLoad the primary packages.\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggside)\n\nRegistered S3 method overwritten by 'ggside':\n  method from   \n  +.gg   ggplot2\n\nlibrary(brms)\n\nLoading required package: Rcpp\nLoading 'brms' package (version 2.22.0). Useful instructions\ncan be found by typing help('brms'). A more detailed introduction\nto the package is available through vignette('brms_overview').\n\nAttaching package: 'brms'\n\nThe following object is masked from 'package:stats':\n\n    ar\n\nlibrary(broom)\nlibrary(broom.mixed)\n\nWe’ll use the penguins data set from the palmerpenguins package.\n\ndata(penguins, package = \"palmerpenguins\")\n\n# Any type of looking at data is a part of EDA \n#glimpse(penguins)\nhead(penguins)\n\n# A tibble: 6 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n5 Adelie  Torgersen           36.7          19.3               193        3450\n6 Adelie  Torgersen           39.3          20.6               190        3650\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\nYou might divide the data set by the three levels of species.\n\npenguins %&gt;% \n  count(species)\n\n# A tibble: 3 × 2\n  species       n\n  &lt;fct&gt;     &lt;int&gt;\n1 Adelie      152\n2 Chinstrap    68\n3 Gentoo      124\n\n\nTo start, we’ll make a subset of the data called chinstrap.\n\nchinstrap &lt;- penguins %&gt;% \n  filter(species == \"Chinstrap\")\n\n#glimpse(chinstrap)\n\nWe’ve done from a full data set with \\(N = 344\\) rows, to a subset with \\(n = 68\\) rows. (“$” signs hold LaTex snippets)"
  },
  {
    "objectID": "posts/Bayes_Lab_1.html#more-exploratory-data-analysis-eda",
    "href": "posts/Bayes_Lab_1.html#more-exploratory-data-analysis-eda",
    "title": "Bayes and Penguins",
    "section": "More Exploratory data analysis (EDA)",
    "text": "More Exploratory data analysis (EDA)\nOur focal variables will be body_mass_g and bill_length_mm. Here they are in a scatter plot.\n\nchinstrap %&gt;% \n  ggplot(aes(x = body_mass_g, y = bill_length_mm)) +\n  geom_point() +\n  stat_smooth(method = \"lm\", formula = 'y ~ x', se = FALSE)\n\n\n\n\n\n\n\n\nWe can augment the plot with some nice functions from the ggside package.\n\nchinstrap %&gt;% \n  ggplot(aes(x = body_mass_g, y = bill_length_mm)) +\n  geom_point() +\n  stat_smooth(method = \"lm\", formula = 'y ~ x', se = FALSE) +\n  # from ggside\n  geom_xsidehistogram(bins = 30) +\n  geom_ysidehistogram(bins = 30) +\n  scale_xsidey_continuous(breaks = NULL) +\n  scale_ysidex_continuous(breaks = NULL) +\n  theme(ggside.panel.scale = 0.25)\n\n\n\n\n\n\n\n\nIt’s a good idea to get a sense of the sample statistics. Here are the means and SD’s for the two variables.\n\nchinstrap %&gt;% \n  summarise(body_mass_g_mean = mean(body_mass_g),\n            body_mass_g_sd = sd(body_mass_g),\n            bill_length_mm_mean = mean(bill_length_mm),\n            bill_length_mm_sd = sd(bill_length_mm)) \n\n# A tibble: 1 × 4\n  body_mass_g_mean body_mass_g_sd bill_length_mm_mean bill_length_mm_sd\n             &lt;dbl&gt;          &lt;dbl&gt;               &lt;dbl&gt;             &lt;dbl&gt;\n1            3733.           384.                48.8              3.34\n\n\nAnd you know that more efficient way to compute sample statistics for multiple variables is to first convert the data into the long format with pivot_longer(). Then you use a group_by() line before the main event in summarise().\n\nchinstrap %&gt;% \n  pivot_longer(cols = c(body_mass_g, bill_length_mm)) %&gt;% \n  group_by(name) %&gt;% \n  summarise(mean = mean(value),\n            sd = sd(value),\n            # count the missing data (if any)\n            n_missing = sum(is.na(value))) \n\n# A tibble: 2 × 4\n  name             mean     sd n_missing\n  &lt;chr&gt;           &lt;dbl&gt;  &lt;dbl&gt;     &lt;int&gt;\n1 bill_length_mm   48.8   3.34         0\n2 body_mass_g    3733.  384.           0\n\n\n\nQuestion 1.1: What do the marginal histograms added by ggside tell you about the distribution of body_mass_g and bill_length_mm individually?\n\nThe marginal histograms added by ggside show that:\n\nThe distribution of body_mass_g is a bit wider than that of bill_length_mm\nBody_mass_g seems to a bit more normally distributed than bill_length_mm\nBill_length_mm has a very clear and pronounced mode centered around the median"
  },
  {
    "objectID": "posts/Bayes_Lab_1.html#ols",
    "href": "posts/Bayes_Lab_1.html#ols",
    "title": "Bayes and Penguins",
    "section": "OLS",
    "text": "OLS\nWe’ll fit the model\n\\[\n\\begin{align}\n\\text{bill_length_mm}_i & = \\beta_0 + \\beta_1 \\text{body_mass_g}_i + \\epsilon_i \\\\\n\\epsilon_i & \\sim \\operatorname{Normal}(0, \\sigma_\\epsilon)\n\\end{align}\n\\]\nwhere bill_length_mm is the dependent variable or a response variable. The sole predictor is body_mass_g. Both variables have \\(i\\) subscripts, which indicate they vary across the \\(i\\) rows in the data set. For now, you might think if \\(i\\) as standing for “index.” The last term in the first line, \\(\\epsilon\\), is often called the error, or noise term. In the second line, we see we’re making the conventional assumption the “errors” are normally distributed around the regression line.\nAn alternative and equivalent way to write that equation is\n\\[\n\\begin{align}\n\\text{bill_length_mm}_i & \\sim \\operatorname{Normal}(\\mu_i, \\sigma) \\\\\n\\mu_i & = \\beta_0 + \\beta_1 \\text{body_mass_g}_i,\n\\end{align}\n\\]\nwhich is meant to convey we are modeling bill_length_mm as normally distributed, with a conditional mean. You don’t tend to see equations written this way in the OLS paradigm. However, this style of notation will serve us better when we start modeling our data with other distributions.\nThis notation grows on you\nFitting the model with the base R lm() function, which uses the OLS algorithm.\n\n# fit\nfit1.ols &lt;- lm(\n  data = chinstrap,\n  bill_length_mm ~ 1 + body_mass_g\n)\n\n# summarize the results\nsummary(fit1.ols)\n\n\nCall:\nlm(formula = bill_length_mm ~ 1 + body_mass_g, data = chinstrap)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-5.8399 -2.2370  0.3247  1.8385  9.3138 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 3.217e+01  3.443e+00   9.344 1.07e-13 ***\nbody_mass_g 4.463e-03  9.176e-04   4.863 7.48e-06 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 2.887 on 66 degrees of freedom\nMultiple R-squared:  0.2638,    Adjusted R-squared:  0.2527 \nF-statistic: 23.65 on 1 and 66 DF,  p-value: 7.48e-06\n\n\nThe point estimates are in scientific notation. We can pull them with the coef() function.\n\ncoef(fit1.ols)\n\n (Intercept)  body_mass_g \n32.174192865  0.004462694 \n\n\nWe can compute fitted values, or predictions, with the predict() function. Here’s the default behavior.\n\npredict(fit1.ols)\n\n       1        2        3        4        5        6        7        8 \n47.79362 49.57870 48.46303 47.90519 48.79773 49.80183 46.67795 48.90930 \n       9       10       11       12       13       14       15       16 \n50.69437 48.68616 49.13243 49.02086 48.68616 50.24810 48.12832 50.24810 \n      17       18       19       20       21       22       23       24 \n46.90108 48.68616 47.57049 51.81005 48.23989 47.34735 45.11601 49.13243 \n      25       26       27       28       29       30       31       32 \n46.90108 50.69437 47.34735 49.13243 48.68616 52.47945 46.45481 51.36378 \n      33       34       35       36       37       38       39       40 \n47.12422 50.47124 48.23989 49.57870 49.35556 53.59512 44.22347 52.25632 \n      41       42       43       44       45       46       47       48 \n49.80183 48.46303 48.01676 47.79362 48.57459 52.03318 47.34735 51.36378 \n      49       50       51       52       53       54       55       56 \n46.67795 48.57459 47.01265 49.80183 48.23989 50.24810 47.12422 47.57049 \n      57       58       59       60       61       62       63       64 \n46.67795 50.24810 49.13243 47.90519 49.80183 48.46303 48.46303 50.02497 \n      65       66       67       68 \n47.34735 49.02086 50.47124 49.02086 \n\n\nWe get one prediction, one fitted value, for each case in the data set. We can express the uncertainty around those predictions with confidence intervals.\n\npredict(fit1.ols,\n        interval = \"confidence\") %&gt;% \n  # just the top 6\n  head()\n\n       fit      lwr      upr\n1 47.79362 46.97456 48.61268\n2 49.57870 48.81580 50.34160\n3 48.46303 47.74771 49.17834\n4 47.90519 47.10905 48.70133\n5 48.79773 48.09864 49.49682\n6 49.80183 48.99783 50.60584\n\n\nWe might also ask for a standard error for each prediction.\n\npredict(fit1.ols,\n        se.fit = TRUE) %&gt;% \n  data.frame()\n\n        fit    se.fit df residual.scale\n1  47.79362 0.4102359 66       2.886728\n2  49.57870 0.3821060 66       2.886728\n3  48.46303 0.3582736 66       2.886728\n4  47.90519 0.3987564 66       2.886728\n5  48.79773 0.3501459 66       2.886728\n6  49.80183 0.4026961 66       2.886728\n7  46.67795 0.5648454 66       2.886728\n8  48.90930 0.3504110 66       2.886728\n9  50.69437 0.5185569 66       2.886728\n10 48.68616 0.3513814 66       2.886728\n11 49.13243 0.3554108 66       2.886728\n12 49.02086 0.3521734 66       2.886728\n13 48.68616 0.3513814 66       2.886728\n14 50.24810 0.4550963 66       2.886728\n15 48.12832 0.3789333 66       2.886728\n16 50.24810 0.4550963 66       2.886728\n17 46.90108 0.5296025 66       2.886728\n18 48.68616 0.3513814 66       2.886728\n19 47.57049 0.4359183 66       2.886728\n20 51.81005 0.7050167 66       2.886728\n21 48.23989 0.3707575 66       2.886728\n22 47.34735 0.4647215 66       2.886728\n23 45.11601 0.8407923 66       2.886728\n24 49.13243 0.3554108 66       2.886728\n25 46.90108 0.5296025 66       2.886728\n26 50.69437 0.5185569 66       2.886728\n27 47.34735 0.4647215 66       2.886728\n28 49.13243 0.3554108 66       2.886728\n29 48.68616 0.3513814 66       2.886728\n30 52.47945 0.8273195 66       2.886728\n31 46.45481 0.6015246 66       2.886728\n32 51.36378 0.6270243 66       2.886728\n33 47.12422 0.4961023 66       2.886728\n34 50.47124 0.4856973 66       2.886728\n35 48.23989 0.3707575 66       2.886728\n36 49.57870 0.3821060 66       2.886728\n37 49.35556 0.3661365 66       2.886728\n38 53.59512 1.0397147 66       2.886728\n39 44.22347 1.0105441 66       2.886728\n40 52.25632 0.7859885 66       2.886728\n41 49.80183 0.4026961 66       2.886728\n42 48.46303 0.3582736 66       2.886728\n43 48.01676 0.3882941 66       2.886728\n44 47.79362 0.4102359 66       2.886728\n45 48.57459 0.3541019 66       2.886728\n46 52.03318 0.7451900 66       2.886728\n47 47.34735 0.4647215 66       2.886728\n48 51.36378 0.6270243 66       2.886728\n49 46.67795 0.5648454 66       2.886728\n50 48.57459 0.3541019 66       2.886728\n51 47.01265 0.5126128 66       2.886728\n52 49.80183 0.4026961 66       2.886728\n53 48.23989 0.3707575 66       2.886728\n54 50.24810 0.4550963 66       2.886728\n55 47.12422 0.4961023 66       2.886728\n56 47.57049 0.4359183 66       2.886728\n57 46.67795 0.5648454 66       2.886728\n58 50.24810 0.4550963 66       2.886728\n59 49.13243 0.3554108 66       2.886728\n60 47.90519 0.3987564 66       2.886728\n61 49.80183 0.4026961 66       2.886728\n62 48.46303 0.3582736 66       2.886728\n63 48.46303 0.3582736 66       2.886728\n64 50.02497 0.4272392 66       2.886728\n65 47.34735 0.4647215 66       2.886728\n66 49.02086 0.3521734 66       2.886728\n67 50.47124 0.4856973 66       2.886728\n68 49.02086 0.3521734 66       2.886728\n\n\nInstead of relying on predictions from the values in the data, we might instead define a sequence of values from the predictor variable. We’ll call those nd.\n\nnd &lt;- tibble(body_mass_g = seq(from = min(chinstrap$body_mass_g),\n                               to = max(chinstrap$body_mass_g),\n                               length.out = 50))\n\nglimpse(nd)\n\nRows: 50\nColumns: 1\n$ body_mass_g &lt;dbl&gt; 2700.000, 2742.857, 2785.714, 2828.571, 2871.429, 2914.286…\n\n\nWe can insert our nd data into the newdata argument.\n\npredict(fit1.ols,\n        interval = \"confidence\",\n        newdata = nd) %&gt;% \n  # just the top 6\n  head()\n\n       fit      lwr      upr\n1 44.22347 42.20585 46.24108\n2 44.41473 42.47057 46.35888\n3 44.60598 42.73489 46.47708\n4 44.79724 42.99874 46.59574\n5 44.98850 43.26207 46.71493\n6 45.17976 43.52482 46.83469\n\n\nNow we wrangle those predictions a bit and pump the results right into ggplot().\n\npredict(fit1.ols,\n        interval = \"confidence\",\n        newdata = nd) %&gt;% \n  data.frame() %&gt;% \n  bind_cols(nd) %&gt;% \n  \n  ggplot(aes(x = body_mass_g)) +\n  # 95% confidence interval ribbon\n  geom_ribbon(aes(ymin = lwr, ymax = upr),\n              alpha = 1/3) +\n  # point estimate line\n  geom_line(aes(y = fit)) +\n  geom_point(data = chinstrap,\n             aes(y = bill_length_mm))\n\n\n\n\n\n\n\n\nIf we wanted to, we could look at the residuals with help from the residuals() function.\n\nresiduals(fit1.ols)\n\n         1          2          3          4          5          6          7 \n-1.2936220  0.4213003  2.8369738 -2.5051894  3.9022718 -4.6018344 -0.5779485 \n         8          9         10         11         12         13         14 \n 2.3907044 -4.6943732  2.6138391 -2.5324303  2.6791371 -1.6861609  1.7518962 \n        15         16         17         18         19         20         21 \n-2.2283241  0.2518962  3.3989168  9.3138391 -1.1704873 -2.6100467 -5.8398915 \n        22         23         24         25         26         27         28 \n 1.1526474 -1.9160056  1.4675697 -0.2010832  1.3056268  3.1526474  0.3675697 \n        29         30         31         32         33         34         35 \n-2.2861609  0.3205492 -5.5548138  2.8362227 -4.6242179  0.5287615  1.4601085 \n        36         37         38         39         40         41         42 \n-2.0786997 -1.7555650 -1.5951243  2.6765332  1.2436839 -0.8018344 -2.2630262 \n        43         44         45         46         47         48         49 \n 2.8832432 -2.2936220  2.3254065 -1.2331814  2.7526474 -2.3637773  4.8220515 \n        50         51         52         53         54         55         56 \n 1.2254065  1.0873494  1.5981656 -2.5398915  0.4518962 -4.6242179  4.6295127 \n        57         58         59         60         61         62         63 \n-1.4779485 -0.9481038  1.0675697 -2.3051894  2.0981656 -1.6630262 -2.7630262 \n        64         65         66         67         68 \n 5.7750309 -3.8473526  0.5791371  0.3287615  1.1791371 \n\n\nHere we might put them in a tibble and display them in a plot.\n\n# put them in a tibble\ntibble(r = residuals(fit1.ols)) %&gt;% \n  # plot!\n  ggplot(aes(x = r)) +\n  geom_histogram(binwidth = 1)\n\n\n\n\n\n\n\n\n\nQuestion 1.2: Can you predict what the mean value, and standard deviations will be? Why? Calculate it. Compare this against outputs in summary(fit1.ols) and explain. Map the values you find to the latex equations before.\n\nI believe this question is referring to the mean value and standard deviations of the residuals? I would predict that the mean should be 0 and the stdev should be 1 because that’s how I remember residuals are meant to shake out?\n\nmean(residuals(fit1.ols))\n\n[1] 1.600027e-16\n\n\n\nYes, it seems the mean is pretty close to 0\n\nsd(residuals(fit1.ols))\n\n[1] 2.865104\n\n\nOkay yes I was pretty off with the standard deviation\n\nsummary(fit1.ols)$sigma\n\n[1] 2.886728\n\n\nBut it is the same as the standard error of the residuals"
  },
  {
    "objectID": "posts/Bayes_Lab_1.html#bayes-with-default-settings",
    "href": "posts/Bayes_Lab_1.html#bayes-with-default-settings",
    "title": "Bayes and Penguins",
    "section": "Bayes with default settings",
    "text": "Bayes with default settings\nWe’ll be fitting our Bayesian models with the brms package. The primary function is brm().\nbrm() can work a lot like the OLS-based lm() function. For example, here’s how to fit a Bayesian version of our OLS model fit1.ols.\n\nfit1.b &lt;- brm(\n  data = chinstrap,\n  bill_length_mm ~ 1 + body_mass_g\n)\n\nCompiling Stan program...\n\n\nTrying to compile a simple C file\n\n\nStart sampling\n\n\nNotice what’s happening in the console, below. We’ll get into the details of what just happened later. For now, appreciate we just fit our first Bayesian model, and it wasn’t all that hard.\n\nLots of warmup, sampling, and compiling across a set of 4 chains\n\nSummarize the model.\n\nsummary(fit1.b)\n\n Family: gaussian \n  Links: mu = identity; sigma = identity \nFormula: bill_length_mm ~ 1 + body_mass_g \n   Data: chinstrap (Number of observations: 68) \n  Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;\n         total post-warmup draws = 4000\n\nRegression Coefficients:\n            Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nIntercept      32.22      3.49    25.21    39.07 1.00     4818     3178\nbody_mass_g     0.00      0.00     0.00     0.01 1.00     4808     3151\n\nFurther Distributional Parameters:\n      Estimate Est.Error l-95% CI u-95% CI Rhat Bulk_ESS Tail_ESS\nsigma     2.93      0.26     2.45     3.49 1.00     1946     1708\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n\n#summary(fit1.ols)\n\n\nQuestion 1.3: Contrast the language of in the brm() output from the in the lm() output. Ignore ‘Rhat,’ ‘Bulk_ESS,’ and ‘Tail_ESS’ for now.\n\nThere are a couple significant differences here.\n\nThe regression coefficients are more interpertable in the brms model than the lm model because the formed is not in in scientific notation.\nAlso the brms isn’t concerned with p values which is probably the biggest difference between the 2 outputs\n\n\nWe can get a quick and dirty plot of the fitted line with the conditional_effects() function.\n\nconditional_effects(fit1.b)"
  },
  {
    "objectID": "posts/Bayes_Lab_1.html#coefficients-and-coefficient-plots",
    "href": "posts/Bayes_Lab_1.html#coefficients-and-coefficient-plots",
    "title": "Bayes and Penguins",
    "section": "Coefficients and coefficient plots",
    "text": "Coefficients and coefficient plots\nWe might want to compare the coefficient summaries from the OLS model to those from the Bayesian model. Here’s the frequentist summary:\n\ncbind(coef(fit1.ols),              # point estimates\n      sqrt(diag(vcov(fit1.ols))),  # standard errors\n      confint(fit1.ols))           # 95% CIs\n\n                                             2.5 %       97.5 %\n(Intercept) 32.174192865 3.4433622902 25.299298235 39.049087495\nbody_mass_g  0.004462694 0.0009176106  0.002630625  0.006294763\n\n\nWe can compute a focused summary of the Bayesian model with the fixef() function.\n\nfixef(fit1.b)\n\n               Estimate    Est.Error         Q2.5        Q97.5\nIntercept   32.21523822 3.4918004963 25.207486257 39.074747128\nbody_mass_g  0.00445017 0.0009312473  0.002615972  0.006331426\n\n\nIn this case, the results are very similar.\nWe can also pull this information from our OLS model with the broom::tidy() function.\n\ntidy(fit1.ols, conf.int = TRUE)\n\n# A tibble: 2 × 7\n  term        estimate std.error statistic  p.value conf.low conf.high\n  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n1 (Intercept) 32.2      3.44          9.34 1.07e-13 25.3      39.0    \n2 body_mass_g  0.00446  0.000918      4.86 7.48e- 6  0.00263   0.00629\n\n\nIf you would like to use the tidy() function with your brms models, it will have to be the version of tidy() from the broom.mixed package.\n\ntidy(fit1.b)\n\nWarning in tidy.brmsfit(fit1.b): some parameter names contain underscores: term\nnaming may be unreliable!\n\n\n# A tibble: 3 × 8\n  effect   component group    term         estimate std.error conf.low conf.high\n  &lt;chr&gt;    &lt;chr&gt;     &lt;chr&gt;    &lt;chr&gt;           &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;     &lt;dbl&gt;\n1 fixed    cond      &lt;NA&gt;     (Intercept)  32.2      3.49     25.2      39.1    \n2 fixed    cond      &lt;NA&gt;     body_mass_g   0.00445  0.000931  0.00262   0.00633\n3 ran_pars cond      Residual sd__Observa…  2.93     0.264     2.45      3.49   \n\n\nHere’s how to wrangle and combine these two results into a single data frame. Then we’ll make a coefficient plot.\n\nbind_rows(\n  tidy(fit1.ols, conf.int = TRUE) %&gt;% select(term, estimate, contains(\"conf\")),\n  tidy(fit1.b) %&gt;% select(term, estimate, contains(\"conf\")) %&gt;% filter(term != \"sd__Observation\")\n) %&gt;% \n  mutate(method = rep(c(\"lm()\", \"brm()\"), each = 2)) %&gt;% \n  \n  ggplot(aes(x = estimate, xmin = conf.low, xmax = conf.high, y = method)) +\n  geom_pointrange() +\n  scale_x_continuous(\"parameter space\", expand = expansion(mult = 0.2)) +\n  scale_y_discrete(expand = expansion(mult = 5)) +\n  facet_wrap(~ term, scales = \"free_x\")\n\nWarning in tidy.brmsfit(fit1.b): some parameter names contain underscores: term\nnaming may be unreliable!\n\n\n\n\n\n\n\n\n\nAt a superficial level for simple conventional regression type models, the results from a Bayesian brm() model will be very similar to those from an OLS lm() model. This will not always be case, and even in this example there are many differences once we look below the surface."
  },
  {
    "objectID": "posts/Bayes_Lab_1.html#more-questionsexercise",
    "href": "posts/Bayes_Lab_1.html#more-questionsexercise",
    "title": "Bayes and Penguins",
    "section": "More Questions/Exercise",
    "text": "More Questions/Exercise\nGo back to the full penguins data set. This time, make a subset of the data called gentoo, which is only the cases for which species == \"Gentoo\".\n\ngentoo &lt;- penguins %&gt;%\n  subset(species == \"Gentoo\")\n\nCan you fit the same OLS model to these data?\n\n# fit\nfit2.ols &lt;- lm(\n  data = gentoo,\n  bill_length_mm ~ 1 + body_mass_g\n)\n\n# summarize the results\nsummary(fit2.ols)\n\n\nCall:\nlm(formula = bill_length_mm ~ 1 + body_mass_g, data = gentoo)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-5.8802 -1.5075 -0.0575  1.3118  8.1107 \n\nCoefficients:\n             Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) 26.739549   2.106594  12.693   &lt;2e-16 ***\nbody_mass_g  0.004091   0.000413   9.905   &lt;2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 2.3 on 121 degrees of freedom\n  (1 observation deleted due to missingness)\nMultiple R-squared:  0.4478,    Adjusted R-squared:  0.4432 \nF-statistic: 98.12 on 1 and 121 DF,  p-value: &lt; 2.2e-16\n\n\nHow about plotting the results with predict()?\n\ngentoo_predict &lt;- predict(fit2.ols,\n        interval = \"confidence\") \nhead(gentoo_predict)\n\n       fit      lwr      upr\n1 45.14847 44.52371 45.77323\n2 50.05752 49.40268 50.71235\n3 44.94393 44.28780 45.60005\n4 50.05752 49.40268 50.71235\n5 48.83025 48.34170 49.31881\n6 45.35301 44.75847 45.94756\n\n\n\npredict(fit2.ols,\n        interval = \"confidence\",\n        newdata = nd) %&gt;% \n  data.frame() %&gt;% \n  bind_cols(nd) %&gt;% \n  ggplot(aes(x = body_mass_g)) +\n  # 95% confidence interval ribbon\n  geom_ribbon(aes(ymin = lwr, ymax = upr),\n              alpha = 0.2) +\n  # point estimate line\n  geom_line(aes(y = fit)) +\n  geom_point(data = gentoo,\n             aes(y = bill_length_mm))\n\n\n\n\n\n\n\n\nCan you fit the same default Bayesian brm() model to these data?\n\nfit2.b &lt;- brm(\n  data = gentoo,\n  bill_length_mm ~ 1 + body_mass_g\n)\n\nWarning: Rows containing NAs were excluded from the model.\n\n\nCompiling Stan program...\n\n\nTrying to compile a simple C file\n\n\nRunning /Library/Frameworks/R.framework/Resources/bin/R CMD SHLIB foo.c\nusing C compiler: ‘Apple clang version 15.0.0 (clang-1500.3.9.4)’\nusing SDK: ‘MacOSX14.4.sdk’\nclang -arch arm64 -I\"/Library/Frameworks/R.framework/Resources/include\" -DNDEBUG   -I\"/Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library/Rcpp/include/\"  -I\"/Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library/RcppEigen/include/\"  -I\"/Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library/RcppEigen/include/unsupported\"  -I\"/Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library/BH/include\" -I\"/Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library/StanHeaders/include/src/\"  -I\"/Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library/StanHeaders/include/\"  -I\"/Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library/RcppParallel/include/\"  -I\"/Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library/rstan/include\" -DEIGEN_NO_DEBUG  -DBOOST_DISABLE_ASSERTS  -DBOOST_PENDING_INTEGER_LOG2_HPP  -DSTAN_THREADS  -DUSE_STANC3 -DSTRICT_R_HEADERS  -DBOOST_PHOENIX_NO_VARIADIC_EXPRESSION  -D_HAS_AUTO_PTR_ETC=0  -include '/Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library/StanHeaders/include/stan/math/prim/fun/Eigen.hpp'  -D_REENTRANT -DRCPP_PARALLEL_USE_TBB=1   -I/opt/R/arm64/include    -fPIC  -falign-functions=64 -Wall -g -O2  -c foo.c -o foo.o\nIn file included from &lt;built-in&gt;:1:\nIn file included from /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library/StanHeaders/include/stan/math/prim/fun/Eigen.hpp:22:\nIn file included from /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library/RcppEigen/include/Eigen/Dense:1:\nIn file included from /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library/RcppEigen/include/Eigen/Core:19:\n/Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library/RcppEigen/include/Eigen/src/Core/util/Macros.h:679:10: fatal error: 'cmath' file not found\n#include &lt;cmath&gt;\n         ^~~~~~~\n1 error generated.\nmake: *** [foo.o] Error 1\n\n\nStart sampling\n\n\n\nSAMPLING FOR MODEL 'anon_model' NOW (CHAIN 1).\nChain 1: \nChain 1: Gradient evaluation took 2.1e-05 seconds\nChain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.21 seconds.\nChain 1: Adjust your expectations accordingly!\nChain 1: \nChain 1: \nChain 1: Iteration:    1 / 2000 [  0%]  (Warmup)\nChain 1: Iteration:  200 / 2000 [ 10%]  (Warmup)\nChain 1: Iteration:  400 / 2000 [ 20%]  (Warmup)\nChain 1: Iteration:  600 / 2000 [ 30%]  (Warmup)\nChain 1: Iteration:  800 / 2000 [ 40%]  (Warmup)\nChain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup)\nChain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling)\nChain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling)\nChain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling)\nChain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling)\nChain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling)\nChain 1: Iteration: 2000 / 2000 [100%]  (Sampling)\nChain 1: \nChain 1:  Elapsed Time: 0.03 seconds (Warm-up)\nChain 1:                0.021 seconds (Sampling)\nChain 1:                0.051 seconds (Total)\nChain 1: \n\nSAMPLING FOR MODEL 'anon_model' NOW (CHAIN 2).\nChain 2: \nChain 2: Gradient evaluation took 2e-06 seconds\nChain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.02 seconds.\nChain 2: Adjust your expectations accordingly!\nChain 2: \nChain 2: \nChain 2: Iteration:    1 / 2000 [  0%]  (Warmup)\nChain 2: Iteration:  200 / 2000 [ 10%]  (Warmup)\nChain 2: Iteration:  400 / 2000 [ 20%]  (Warmup)\nChain 2: Iteration:  600 / 2000 [ 30%]  (Warmup)\nChain 2: Iteration:  800 / 2000 [ 40%]  (Warmup)\nChain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup)\nChain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling)\nChain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling)\nChain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling)\nChain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling)\nChain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling)\nChain 2: Iteration: 2000 / 2000 [100%]  (Sampling)\nChain 2: \nChain 2:  Elapsed Time: 0.027 seconds (Warm-up)\nChain 2:                0.023 seconds (Sampling)\nChain 2:                0.05 seconds (Total)\nChain 2: \n\nSAMPLING FOR MODEL 'anon_model' NOW (CHAIN 3).\nChain 3: \nChain 3: Gradient evaluation took 2e-06 seconds\nChain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.02 seconds.\nChain 3: Adjust your expectations accordingly!\nChain 3: \nChain 3: \nChain 3: Iteration:    1 / 2000 [  0%]  (Warmup)\nChain 3: Iteration:  200 / 2000 [ 10%]  (Warmup)\nChain 3: Iteration:  400 / 2000 [ 20%]  (Warmup)\nChain 3: Iteration:  600 / 2000 [ 30%]  (Warmup)\nChain 3: Iteration:  800 / 2000 [ 40%]  (Warmup)\nChain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup)\nChain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling)\nChain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling)\nChain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling)\nChain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling)\nChain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling)\nChain 3: Iteration: 2000 / 2000 [100%]  (Sampling)\nChain 3: \nChain 3:  Elapsed Time: 0.031 seconds (Warm-up)\nChain 3:                0.023 seconds (Sampling)\nChain 3:                0.054 seconds (Total)\nChain 3: \n\nSAMPLING FOR MODEL 'anon_model' NOW (CHAIN 4).\nChain 4: \nChain 4: Gradient evaluation took 2e-06 seconds\nChain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.02 seconds.\nChain 4: Adjust your expectations accordingly!\nChain 4: \nChain 4: \nChain 4: Iteration:    1 / 2000 [  0%]  (Warmup)\nChain 4: Iteration:  200 / 2000 [ 10%]  (Warmup)\nChain 4: Iteration:  400 / 2000 [ 20%]  (Warmup)\nChain 4: Iteration:  600 / 2000 [ 30%]  (Warmup)\nChain 4: Iteration:  800 / 2000 [ 40%]  (Warmup)\nChain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup)\nChain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling)\nChain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling)\nChain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling)\nChain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling)\nChain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling)\nChain 4: Iteration: 2000 / 2000 [100%]  (Sampling)\nChain 4: \nChain 4:  Elapsed Time: 0.034 seconds (Warm-up)\nChain 4:                0.023 seconds (Sampling)\nChain 4:                0.057 seconds (Total)\nChain 4: \n\n\nHow about plotting the results with conditional_effects()?\n\nconditional_effects(fit2.b)\n\n\n\n\n\n\n\n\nCan you make a coefficient plot comparing the new OLS and Bayesian beta coefficients?\n\nbind_rows(\n  tidy(fit2.ols, conf.int = TRUE) %&gt;% select(term, estimate, contains(\"conf\")),\n  tidy(fit2.b) %&gt;% select(term, estimate, contains(\"conf\")) %&gt;% filter(term != \"sd__Observation\")\n) %&gt;% \n  mutate(method = rep(c(\"lm()\", \"brm()\"), each = 2)) %&gt;% \n  \n  ggplot(aes(x = estimate, xmin = conf.low, xmax = conf.high, y = method)) +\n  geom_pointrange() +\n  scale_x_continuous(\"parameter space\", expand = expansion(mult = 0.2)) +\n  scale_y_discrete(expand = expansion(mult = 5)) +\n  facet_wrap(~ term, scales = \"free_x\")\n\nWarning in tidy.brmsfit(fit2.b): some parameter names contain underscores: term\nnaming may be unreliable!"
  },
  {
    "objectID": "posts/Bayes_Lab_1.html#exploring-model-results",
    "href": "posts/Bayes_Lab_1.html#exploring-model-results",
    "title": "Bayes and Penguins",
    "section": "Exploring model results",
    "text": "Exploring model results\nWe can extract the posterior draws from our Bayesian models with the as_draws_df() function.\n\nas_draws_df(fit1.b)\n\n# A draws_df: 1000 iterations, 4 chains, and 6 variables\n   b_Intercept b_body_mass_g sigma Intercept lprior lp__\n1           31        0.0048   3.7        49   -4.5 -175\n2           31        0.0045   2.6        48   -4.3 -172\n3           28        0.0054   2.7        48   -4.3 -172\n4           34        0.0040   3.1        49   -4.3 -171\n5           34        0.0040   3.1        49   -4.3 -171\n6           32        0.0047   2.7        49   -4.2 -171\n7           32        0.0044   2.8        49   -4.2 -171\n8           30        0.0051   2.7        49   -4.2 -171\n9           35        0.0036   2.9        49   -4.3 -171\n10          35        0.0037   2.9        49   -4.3 -171\n# ... with 3990 more draws\n# ... hidden reserved variables {'.chain', '.iteration', '.draw'}\n\n\nNote the meta data. We can get a sense of the full posterior distributions of the \\(\\beta\\) parameters with plots.\n\n# wrangle\nas_draws_df(fit1.b) %&gt;% \n  pivot_longer(starts_with(\"b_\")) %&gt;% \n  \n  # plot!\n  ggplot(aes(x = value)) + \n  # geom_density(fill = \"grey20\") +\n  geom_histogram(bins = 40) +\n  facet_wrap(~ name, scales = \"free\")\n\nWarning: Dropping 'draws_df' class as required metadata was removed.\n\n\n\n\n\n\n\n\n\nWe might summarize those posterior distributions with basic descriptive statistics, like their means, SD’s, and inner 95-percentile range.\n\nas_draws_df(fit1.b) %&gt;% \n  pivot_longer(starts_with(\"b_\")) %&gt;% \n  group_by(name) %&gt;% \n  summarise(mean = mean(value),\n            sd = sd(value),\n            ll = quantile(value, probs = 0.025),\n            ul = quantile(value, probs = 0.975))\n\nWarning: Dropping 'draws_df' class as required metadata was removed.\n\n\n# A tibble: 2 × 5\n  name              mean       sd       ll       ul\n  &lt;chr&gt;            &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n1 b_Intercept   32.2     3.49     25.2     39.1    \n2 b_body_mass_g  0.00445 0.000931  0.00262  0.00633\n\n\nNotice how these values match up exactly with those from fixef().\n\nfixef(fit1.b)\n\n               Estimate    Est.Error         Q2.5        Q97.5\nIntercept   32.21523822 3.4918004963 25.207486257 39.074747128\nbody_mass_g  0.00445017 0.0009312473  0.002615972  0.006331426\n\n\nThus,\n\nThe Bayesian posterior mean is analogous to the frequentist point estimate.\nThe Bayesian posterior SD is analogous to the frequentist standard error.\nThe Bayesian posterior percentile-based 95% (credible) interval is analogous to the frequentist 95% confidence interval.\n\nThese are not exactly the same, mind you. But they serve similar functions.\nWe can also get a sense of these distributions with the plot() function.\n\nplot(fit1.b)\n\n\n\n\n\n\n\n\nIgnore the trace plots on the right for a moment. And let’s consider the pairs() plot.\n\npairs(fit1.b)\n\n\n\n\n\n\n\n# we can adjust some of the settings with the off_diag_args argument\npairs(fit1.b, off_diag_args = list(size = 1/4, alpha = 1/4))\n\n\n\n\n\n\n\n\n\nQuestion 2.1 : In the parlance of Probability, do you know what is the term by which the distributions in the diagonal of the above plot are known as? And the distributions in the off-diagonal?\n\nOne is the marginal distribution and the other im not so sure\n\nNotice how the two \\(\\beta\\) parameters seem to have a strong negative correlation. We can quantify that correlation with the vcov() function.\n\nvcov(fit1.b)                      # variance/covariance metric\n\n               Intercept   body_mass_g\nIntercept   12.192670706 -3.235118e-03\nbody_mass_g -0.003235118  8.672215e-07\n\nvcov(fit1.b, correlation = TRUE)  # correlation metric\n\n             Intercept body_mass_g\nIntercept    1.0000000  -0.9948915\nbody_mass_g -0.9948915   1.0000000\n\n\nThis correlation/covariance among the parameters is not unique to Bayesian models. Here’s the vcov() output for the OLS model.\n\nvcov(fit1.ols)  # variance/covariance metric\n\n             (Intercept)   body_mass_g\n(Intercept) 11.856743861 -3.143295e-03\nbody_mass_g -0.003143295  8.420092e-07\n\n\nI’m not aware of an easy way to get that output in a correlation metric for our OLS model. Here’s how to compute the correlation by hand.\n\ncov_xy &lt;- vcov(fit1.ols)[2, 1]  # covariance between the intercept and slope\nvar_x  &lt;- vcov(fit1.ols)[1, 1]  # variance for the intercept\nvar_y  &lt;- vcov(fit1.ols)[2, 2]  # variance for the slope\n\n# convert the covariance into a correlation\ncov_xy / (sqrt(var_x) * sqrt(var_y))\n\n[1] -0.9948188\n\n\nThat code follows the definition of a covariance, which can be expressed as\n\\[\n\\text{Cov}(x, y) = \\rho \\sigma_x \\sigma_y,\n\\]\nwhere \\(\\sigma_x\\) is the standard deviation for x, \\(\\sigma_y\\) is the standard deviation for y, and \\(\\rho\\) is their correlation. And thus, you can convert a covariance into a correlation with the formula\n\\[\n\\rho = \\frac{\\sigma_{xy}}{\\sigma_x \\sigma_y},\n\\]\nwhere \\(\\sigma_{xy}\\) is the covariance of x and y."
  },
  {
    "objectID": "posts/Bayes_Lab_1.html#draws",
    "href": "posts/Bayes_Lab_1.html#draws",
    "title": "Bayes and Penguins",
    "section": "Draws",
    "text": "Draws\nLet’s save the as_draws_df() output for our model as an object called draws.\n\ndraws &lt;- as_draws_df(fit1.b)\nglimpse(draws)\n\nRows: 4,000\nColumns: 9\n$ b_Intercept   &lt;dbl&gt; 31.30765, 31.40347, 28.36761, 33.71740, 33.71740, 31.522…\n$ b_body_mass_g &lt;dbl&gt; 0.004755736, 0.004543947, 0.005357362, 0.004030542, 0.00…\n$ sigma         &lt;dbl&gt; 3.652911, 2.647143, 2.747487, 3.137802, 3.137802, 2.6904…\n$ Intercept     &lt;dbl&gt; 49.06123, 48.36642, 48.36712, 48.76376, 48.76376, 49.082…\n$ lprior        &lt;dbl&gt; -4.470492, -4.266950, -4.290327, -4.349646, -4.349646, -…\n$ lp__          &lt;dbl&gt; -174.5306, -172.2864, -172.4295, -171.4945, -171.4945, -…\n$ .chain        &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ .iteration    &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 1…\n$ .draw         &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 1…\n\n\nFor each parameter in the model, we have 4,000 draws from the posterior.\n\nQuestion 2.2: How does this concept relate to representing uncertainty? Can you anticipate how predictions are made based upon these 4000 draws and the linear regression formula?\n\nI anticipate its something like a normal distribution, similar to when we used to model data last semester and we use the linear regression to get those predicted values and model the data\n\n\\[\\widehat{\\text{bill_length_mm}}_i = \\beta_0 + \\beta_1 \\text{body_mass_g}_i.\\]\nLet’s break the 4000 draws down with our draws object.\n\n# adjust the parameter names \ndraws &lt;- draws %&gt;% \n  mutate(beta0 = b_Intercept,\n         beta1 = b_body_mass_g)\n\n# Note: go through this one line at a time\ndraws %&gt;% \n  select(.draw, beta0, beta1) %&gt;% \n  mutate(body_mass_g = mean(chinstrap$body_mass_g)) %&gt;% \n  mutate(y_hat = beta0 + beta1 * body_mass_g) %&gt;% \n  \n  ggplot(aes(x = y_hat)) +\n  geom_histogram(bins = 40) +\n  labs(title = \"Bayesians have posterior distributions\",\n       x = expression(hat(italic(y))*'|'*italic(x)==3733.1)) +\n  coord_cartesian(xlim = c(47, 51))\n\n\n\n\n\n\n\n\nHere’s what that is for the OLS model.\n\npredict(fit1.ols,\n        newdata = tibble(body_mass_g = mean(chinstrap$body_mass_g)),\n        interval = \"confidence\") %&gt;% \n  data.frame() %&gt;% \n  \n  ggplot(aes(x = fit, xmin = lwr, xmax = upr, y = 0)) +\n  geom_pointrange() +\n  scale_y_continuous(NULL, breaks = NULL) +\n  labs(title = \"Frequentists have point estmates and 95% CI's\",\n       x = expression(hat(italic(y))*'|'*italic(x)==3733.1)) +\n  coord_cartesian(xlim = c(47, 51))\n\n\n\n\n\n\n\n\nAnother handy way to present a Bayesian posterior is as a density with a point-interval summary below.\n\nlibrary(ggdist) #for stat_half_eye and mean_qi\n\n\nAttaching package: 'ggdist'\n\n\nThe following objects are masked from 'package:brms':\n\n    dstudent_t, pstudent_t, qstudent_t, rstudent_t\n\ndraws %&gt;% \n  mutate(body_mass_g = mean(chinstrap$body_mass_g)) %&gt;% \n  mutate(y_hat = beta0 + beta1 * body_mass_g) %&gt;% \n  \n  ggplot(aes(x = y_hat)) +\n  stat_halfeye(point_interval = mean_qi, .width = .95) +\n  # scale_y_continuous(NULL, breaks = NULL) +\n  labs(title = \"Bayesians have posterior distributions\",\n       x = expression(hat(italic(y))*'|'*italic(x)==3733.1)) +\n  coord_cartesian(xlim = c(47, 51))\n\n\n\n\n\n\n\n\nThe dot at the base of the plot is the posterior mean, and the horizontal line marks the 95% percentile-based interval. If you’d like to mark the median instead, set point_interval = median_qi. If you’re like a different kind of horizontal interval, adjust the .width argument.\n\ndraws %&gt;% \n  mutate(body_mass_g = mean(chinstrap$body_mass_g)) %&gt;% \n  mutate(y_hat = beta0 + beta1 * body_mass_g) %&gt;% \n  \n  ggplot(aes(x = y_hat)) +\n  # note the changes to this line\n  stat_halfeye(point_interval = median_qi, .width = c(.5, .99)) +\n  scale_y_continuous(NULL, breaks = NULL) +\n  labs(title = \"Bayesians have posterior distributions\",\n       subtitle = \"The dot marks the median.\\nThe thicker line marks the 50% interval, and\\nthe thinner line marks the 99% interval.\",\n       x = expression(hat(italic(y))*'|'*italic(x)==3733.1)) +\n  coord_cartesian(xlim = c(47, 51))"
  },
  {
    "objectID": "posts/Bayes_Lab_1.html#about-those-means-sds-and-intervals.",
    "href": "posts/Bayes_Lab_1.html#about-those-means-sds-and-intervals.",
    "title": "Bayes and Penguins",
    "section": "About those means, SD’s, and intervals.",
    "text": "About those means, SD’s, and intervals.\nYou can describe a Bayesian posterior in a lot of different ways. Earlier we said the posterior mean is the Bayesian point estimate. This isn’t strictly true. Means are very popular, but you can summarize a posterior by its mean, median, or mode.\nLet’s see what this looks like in practice. First, we compute and save our statistics for each of our model parameters.\n\npoints &lt;- draws %&gt;% \n  rename(`beta[0]` = beta0,\n         `beta[1]` = beta1) %&gt;% \n  pivot_longer(cols = c(`beta[0]`, `beta[1]`, sigma), \n               names_to = \"parameter\") %&gt;% \n  group_by(parameter) %&gt;% \n  summarise(mean = mean(value),\n            median = median(value),\n            mode = Mode(value)) %&gt;% \n  pivot_longer(starts_with(\"m\"), names_to = \"statistic\")\n\n# what?\npoints\n\n# A tibble: 9 × 3\n  parameter statistic    value\n  &lt;chr&gt;     &lt;chr&gt;        &lt;dbl&gt;\n1 beta[0]   mean      32.2    \n2 beta[0]   median    32.3    \n3 beta[0]   mode      32.5    \n4 beta[1]   mean       0.00445\n5 beta[1]   median     0.00444\n6 beta[1]   mode       0.00441\n7 sigma     mean       2.93   \n8 sigma     median     2.91   \n9 sigma     mode       2.88   \n\n\nNow plot.\n\ndraws %&gt;% \n  rename(`beta[0]` = beta0,\n         `beta[1]` = beta1) %&gt;% \n  pivot_longer(cols = c(`beta[0]`, `beta[1]`, sigma), \n               names_to = \"parameter\") %&gt;% \n  \n  ggplot(aes(x = value)) +\n  geom_density() +\n  geom_vline(data = points,\n             aes(xintercept = value, color = statistic),\n             size = 3/4) +\n  scale_color_viridis_d(option = \"A\", end = .8) +\n  scale_y_continuous(NULL, breaks = NULL) +\n  xlab(\"parameter space\") +\n  facet_wrap(~ parameter, labeller = label_parsed, scales = \"free\", ncol = 1) +\n  theme(strip.text = element_text(size = 14))\n\n\n\n\n\n\n\n\n\nQuestion 2.3: Discuss the skew in \\(\\sigma\\).Why it might arise, etc.?\nI wasn’t quite sure on this one so I had to google and it looks like we’ve updated our posterior?\n\nThe mean is the brms default summary, and McElreath (2015, 2020) defaulted to the mean in his texts.\nThe median is also available for many brms functions, and it’s what Gelman et al (2020) recommend.\nThe mode can be attractive for very skewed distributions, and it’s what Kruschke (2015) used in his text.\n\nWith many brms functions, you can request the median by setting robust = TRUE. For example:\n\nfixef(fit1.b)                 # means\n\n               Estimate    Est.Error         Q2.5        Q97.5\nIntercept   32.21523822 3.4918004963 25.207486257 39.074747128\nbody_mass_g  0.00445017 0.0009312473  0.002615972  0.006331426\n\nfixef(fit1.b, robust = TRUE)  # medians\n\n                Estimate    Est.Error         Q2.5        Q97.5\nIntercept   32.269483498 3.3452233494 25.207486257 39.074747128\nbody_mass_g  0.004440697 0.0008928745  0.002615972  0.006331426\n\n\n\n\nQuestion 2.4: Given the skew in sigma and what you know about summary statistics, what might be the implication of using just the mean, median, or mode of posteriors to make a prediction?\n\nIf the mean, media, and mode of posteriors is subject to skew so easily, then it’s probably not the most reliable and we should be careful to make predictions off of it\n\n\nSD’s and MAD SD’s.\nEarlier we said the posterior SD is the Bayesian standard error. This isn’t strictly true. You can also use the median absolute deviation (MAD SD). If we let \\(M\\) stand for the median of some variable \\(y\\), which varies across \\(i\\) cases, we can define the MAD SD as\n\\[\\textit{MAD SD} = 1.4826 \\times \\operatorname{median}_{i = 1}^n |y_i - M|,\\]\nwhere \\(1.4826\\) is a constant that scales the MAD SD into a standard-deviation metric. Here’s what this looks like in practice.\n\n# go through this line by line\ndraws %&gt;% \n  select(beta0) %&gt;% \n  mutate(mdn = median(beta0)) %&gt;% \n  mutate(`|yi - mdn|` = abs(beta0 - mdn)) %&gt;% \n  summarise(MAD_SD = 1.4826 * median(`|yi - mdn|`))\n\n# A tibble: 1 × 1\n  MAD_SD\n   &lt;dbl&gt;\n1   3.35\n\n\nBase R also has a mad() function.\n\n?mad\n\nHelp on topic 'mad' was found in the following packages:\n\n  Package               Library\n  posterior             /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library\n  stats                 /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library\n\n\nUsing the first match ...\n\ndraws %&gt;% \n  summarise(MAD_SD = mad(beta0))\n\n# A tibble: 1 × 1\n  MAD_SD\n   &lt;dbl&gt;\n1   3.35\n\n\nYou can request the MAD SD from many brms functions by setting robust = TRUE.\n\nfixef(fit1.b)                 # SD\n\n               Estimate    Est.Error         Q2.5        Q97.5\nIntercept   32.21523822 3.4918004963 25.207486257 39.074747128\nbody_mass_g  0.00445017 0.0009312473  0.002615972  0.006331426\n\nfixef(fit1.b, robust = TRUE)  # MAD SD\n\n                Estimate    Est.Error         Q2.5        Q97.5\nIntercept   32.269483498 3.3452233494 25.207486257 39.074747128\nbody_mass_g  0.004440697 0.0008928745  0.002615972  0.006331426\n\n\n\nTo my eye, many authors (e.g., Kruschke, McElreath) just use the SD.\nGelman et al (see Section 5.3) recommend the MAD SD.\n\n\n\nBayesian intervals.\nBayesians describe the widths of their posteriors with intervals. I’ve seen these variously described as confidence intervals, credible intervals, probability intervals, and even uncertainty intervals. My recommendation is just pick a term, and clearly tell your audience what you mean (e.g., at the end of a Method section in a journal article).\nTo my eye, the most popular interval is a 95% percentile-based interval. 95% is conventional, perhaps due to the popularity of the 95% frequentist confidence interval, which is related to the 0.05 alpha level used for the conventional \\(p\\)-value cutoff. However, you can use other percentiles. Some common alternatives are 99%, 89%, 80%, and 50%.\nAlso, Bayesian intervals aren’t always percentile based. An alternative is the highest posterior density interval (HPDI), which has mathematical properties some find desirable.\nbrms only supports percentile-based intervals, but it does allow for a variety of different ranges via the prob argument. For example, here’s how to request 80% intervals in summary().\n\nsummary(fit1.b, prob = .80)\n\n Family: gaussian \n  Links: mu = identity; sigma = identity \nFormula: bill_length_mm ~ 1 + body_mass_g \n   Data: chinstrap (Number of observations: 68) \n  Draws: 4 chains, each with iter = 2000; warmup = 1000; thin = 1;\n         total post-warmup draws = 4000\n\nRegression Coefficients:\n            Estimate Est.Error l-80% CI u-80% CI Rhat Bulk_ESS Tail_ESS\nIntercept      32.22      3.49    27.75    36.63 1.00     4818     3178\nbody_mass_g     0.00      0.00     0.00     0.01 1.00     4808     3151\n\nFurther Distributional Parameters:\n      Estimate Est.Error l-80% CI u-80% CI Rhat Bulk_ESS Tail_ESS\nsigma     2.93      0.26     2.60     3.28 1.00     1946     1708\n\nDraws were sampled using sampling(NUTS). For each parameter, Bulk_ESS\nand Tail_ESS are effective sample size measures, and Rhat is the potential\nscale reduction factor on split chains (at convergence, Rhat = 1).\n\n\nRegarding interval widths:\n\n95% Intervals are widely used.\nMcElreat likes 89% intervals, and uses them as a default in his rethinking package.\nSome of the bayesplot, ggdist, and tidybayes functions return 80% intervals.\nSome of the ggdist, and tidybayes functions return 66% or 50% intervals.\nI’ve heard Gelman report his fondness for 50% intervals on his blog (https://statmodeling.stat.columbia.edu/2016/11/05/why-i-prefer-50-to-95-intervals/).\n\nRegarding interval types:\n\nPercentile-based intervals are widely used in the Stan ecosystem, and are supported in texts like Gelman et al.\nKruschke has consistently advocates for HPDI’s in his articles, and in his text.\n\n\n\n\nPosterior summaries with tidybayes.\nMatthew Kay’s tidybayes package (https://mjskay.github.io/tidybayes/) offers an array of convenience functions for summarizing posterior distributions with points and intervals. See the Point summaries and intervals section of Kay’s Extracting and visualizing tidy draws from brms models vignette (https://mjskay.github.io/tidybayes/articles/tidy-brms.html#point-summaries-and-intervals) for a detailed breakdown. In short, the family of functions use the naming scheme [median|mean|mode]_[qi|hdi]. Here are a few examples.\n\ndraws %&gt;% mean_qi(beta0)                        # mean and 95% percentile interval\n\nWarning: Dropping 'draws_df' class as required metadata was removed.\nWarning: Dropping 'draws_df' class as required metadata was removed.\nWarning: Dropping 'draws_df' class as required metadata was removed.\n\n\n# A tibble: 1 × 6\n  beta0 .lower .upper .width .point .interval\n  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;    \n1  32.2   25.2   39.1   0.95 mean   qi       \n\ndraws %&gt;% median_qi(beta0, .width = .80)        # median and 80% percentile interval\n\nWarning: Dropping 'draws_df' class as required metadata was removed.\nWarning: Dropping 'draws_df' class as required metadata was removed.\nWarning: Dropping 'draws_df' class as required metadata was removed.\n\n\n# A tibble: 1 × 6\n  beta0 .lower .upper .width .point .interval\n  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;    \n1  32.3   27.8   36.6    0.8 median qi       \n\ndraws %&gt;% mode_hdi(beta0, .width = c(.5, .95))  # mode, with 95 and 50% HPDI's\n\nWarning: Dropping 'draws_df' class as required metadata was removed.\nWarning: Dropping 'draws_df' class as required metadata was removed.\nWarning: Dropping 'draws_df' class as required metadata was removed.\n\n\n# A tibble: 2 × 6\n  beta0 .lower .upper .width .point .interval\n  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;  &lt;chr&gt;    \n1  32.5   29.9   34.4   0.5  mode   hdi      \n2  32.5   25.0   38.9   0.95 mode   hdi      \n\n\nAs an aside, the Mode() function we used a while back was also from tidybayes.\n\n\nSpaghetti plots.\nRemember how we said the draw was something like 4,000 separate equations for our Bayesian model? Let’s see that again.\n\ndraws %&gt;% \n  select(.draw, beta0, beta1) %&gt;% \n  mutate(body_mass_g = mean(chinstrap$body_mass_g)) %&gt;% \n  # here's the equation\n  mutate(y_hat = beta0 + beta1 * body_mass_g) %&gt;% \n  # subset the top 6\n  head()\n\nWarning: Dropping 'draws_df' class as required metadata was removed.\n\n\n# A tibble: 6 × 5\n  .draw beta0   beta1 body_mass_g y_hat\n  &lt;int&gt; &lt;dbl&gt;   &lt;dbl&gt;       &lt;dbl&gt; &lt;dbl&gt;\n1     1  31.3 0.00476       3733.  49.1\n2     2  31.4 0.00454       3733.  48.4\n3     3  28.4 0.00536       3733.  48.4\n4     4  33.7 0.00403       3733.  48.8\n5     5  33.7 0.00403       3733.  48.8\n6     6  31.5 0.00470       3733.  49.1\n\n\nOne way we might emphasize the 4,000 equations is with a spaghetti plot. When we display the fitted line for bill_length_mm over the range of body_mass_g values, we can display a single line for each posterior draw. Here’s what that can look like.\n\nrange(chinstrap$body_mass_g)\n\n[1] 2700 4800\n\n# Note: go through this one line at a time\ndraws %&gt;% \n  select(.draw, beta0, beta1) %&gt;% \n  expand_grid(body_mass_g = range(chinstrap$body_mass_g)) %&gt;% \n  mutate(y_hat = beta0 + beta1 * body_mass_g) %&gt;% \n  \n  # plot!\n  ggplot(aes(x = body_mass_g, y = y_hat, group = .draw)) +\n  geom_line(linewidth = 1/10, alpha = 1/10)\n\n\n\n\n\n\n\n\nIt might be easier to see what’s going on with a random subset of, say, 10 of the posterior draws.\n\nset.seed(10)\n\ndraws %&gt;% \n  # take a random sample of 10 rows\n  slice_sample(n = 10) %&gt;% \n  select(.draw, beta0, beta1) %&gt;% \n  expand_grid(body_mass_g = range(chinstrap$body_mass_g)) %&gt;% \n  mutate(y_hat = beta0 + beta1 * body_mass_g) %&gt;% \n  \n  ggplot(aes(x = body_mass_g, y = y_hat, group = .draw)) +\n  geom_line(linewidth = 1/2, alpha = 1/2)\n\n\n\n\n\n\n\n\nWhile we’re at it, let’s take 20 draws and do a little color coding.\n\nset.seed(20)\n\ndraws %&gt;% \n  # take a random sample of 20 rows\n  slice_sample(n = 20) %&gt;% \n  select(.draw, beta0, beta1) %&gt;% \n  expand_grid(body_mass_g = range(chinstrap$body_mass_g)) %&gt;% \n  mutate(y_hat = beta0 + beta1 * body_mass_g) %&gt;% \n  \n  ggplot(aes(x = body_mass_g, y = y_hat, group = .draw, color = beta0)) +\n  geom_line() +\n  scale_color_viridis_c(expression(beta[0]~(the~intercept)), end = .9)\n\n\n\n\n\n\n\n\nDo you remember how we said \\(\\beta_0\\) and \\(\\beta_1\\) had a strong negative correlation? Notice how the lines computed by lower \\(\\beta_0\\) values also tend to have higher slopes. This will happen all the time with conventional regression models.\n\n\nQuestion 2.5: We have done all this without yet specifying a prior. What do you think is going on?\nMaybe it’s deciding what the most likely prior is?"
  },
  {
    "objectID": "posts/Bayes_Lab_1.html#questionexercise",
    "href": "posts/Bayes_Lab_1.html#questionexercise",
    "title": "Bayes and Penguins",
    "section": "Question/Exercise:",
    "text": "Question/Exercise:\nIn the last part, we made a subset of the penguins data called gentoo, which was only the cases for which species == \"Gentoo\". Do that again and refit the Bayesian model to those data. Can you then remake some of the figures in this file with the new version of the model?\n\nlast_q &lt;- brm(\n  data = gentoo,\n  bill_length_mm ~ 1 + body_mass_g\n)\n\nWarning: Rows containing NAs were excluded from the model.\n\n\nCompiling Stan program...\n\n\nTrying to compile a simple C file\n\n\nRunning /Library/Frameworks/R.framework/Resources/bin/R CMD SHLIB foo.c\nusing C compiler: ‘Apple clang version 15.0.0 (clang-1500.3.9.4)’\nusing SDK: ‘MacOSX14.4.sdk’\nclang -arch arm64 -I\"/Library/Frameworks/R.framework/Resources/include\" -DNDEBUG   -I\"/Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library/Rcpp/include/\"  -I\"/Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library/RcppEigen/include/\"  -I\"/Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library/RcppEigen/include/unsupported\"  -I\"/Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library/BH/include\" -I\"/Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library/StanHeaders/include/src/\"  -I\"/Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library/StanHeaders/include/\"  -I\"/Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library/RcppParallel/include/\"  -I\"/Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library/rstan/include\" -DEIGEN_NO_DEBUG  -DBOOST_DISABLE_ASSERTS  -DBOOST_PENDING_INTEGER_LOG2_HPP  -DSTAN_THREADS  -DUSE_STANC3 -DSTRICT_R_HEADERS  -DBOOST_PHOENIX_NO_VARIADIC_EXPRESSION  -D_HAS_AUTO_PTR_ETC=0  -include '/Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library/StanHeaders/include/stan/math/prim/fun/Eigen.hpp'  -D_REENTRANT -DRCPP_PARALLEL_USE_TBB=1   -I/opt/R/arm64/include    -fPIC  -falign-functions=64 -Wall -g -O2  -c foo.c -o foo.o\nIn file included from &lt;built-in&gt;:1:\nIn file included from /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library/StanHeaders/include/stan/math/prim/fun/Eigen.hpp:22:\nIn file included from /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library/RcppEigen/include/Eigen/Dense:1:\nIn file included from /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library/RcppEigen/include/Eigen/Core:19:\n/Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/library/RcppEigen/include/Eigen/src/Core/util/Macros.h:679:10: fatal error: 'cmath' file not found\n#include &lt;cmath&gt;\n         ^~~~~~~\n1 error generated.\nmake: *** [foo.o] Error 1\n\n\nStart sampling\n\n\n\nSAMPLING FOR MODEL 'anon_model' NOW (CHAIN 1).\nChain 1: \nChain 1: Gradient evaluation took 2.8e-05 seconds\nChain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.28 seconds.\nChain 1: Adjust your expectations accordingly!\nChain 1: \nChain 1: \nChain 1: Iteration:    1 / 2000 [  0%]  (Warmup)\nChain 1: Iteration:  200 / 2000 [ 10%]  (Warmup)\nChain 1: Iteration:  400 / 2000 [ 20%]  (Warmup)\nChain 1: Iteration:  600 / 2000 [ 30%]  (Warmup)\nChain 1: Iteration:  800 / 2000 [ 40%]  (Warmup)\nChain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup)\nChain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling)\nChain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling)\nChain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling)\nChain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling)\nChain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling)\nChain 1: Iteration: 2000 / 2000 [100%]  (Sampling)\nChain 1: \nChain 1:  Elapsed Time: 0.028 seconds (Warm-up)\nChain 1:                0.026 seconds (Sampling)\nChain 1:                0.054 seconds (Total)\nChain 1: \n\nSAMPLING FOR MODEL 'anon_model' NOW (CHAIN 2).\nChain 2: \nChain 2: Gradient evaluation took 2e-06 seconds\nChain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.02 seconds.\nChain 2: Adjust your expectations accordingly!\nChain 2: \nChain 2: \nChain 2: Iteration:    1 / 2000 [  0%]  (Warmup)\nChain 2: Iteration:  200 / 2000 [ 10%]  (Warmup)\nChain 2: Iteration:  400 / 2000 [ 20%]  (Warmup)\nChain 2: Iteration:  600 / 2000 [ 30%]  (Warmup)\nChain 2: Iteration:  800 / 2000 [ 40%]  (Warmup)\nChain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup)\nChain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling)\nChain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling)\nChain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling)\nChain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling)\nChain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling)\nChain 2: Iteration: 2000 / 2000 [100%]  (Sampling)\nChain 2: \nChain 2:  Elapsed Time: 0.036 seconds (Warm-up)\nChain 2:                0.025 seconds (Sampling)\nChain 2:                0.061 seconds (Total)\nChain 2: \n\nSAMPLING FOR MODEL 'anon_model' NOW (CHAIN 3).\nChain 3: \nChain 3: Gradient evaluation took 1e-06 seconds\nChain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.01 seconds.\nChain 3: Adjust your expectations accordingly!\nChain 3: \nChain 3: \nChain 3: Iteration:    1 / 2000 [  0%]  (Warmup)\nChain 3: Iteration:  200 / 2000 [ 10%]  (Warmup)\nChain 3: Iteration:  400 / 2000 [ 20%]  (Warmup)\nChain 3: Iteration:  600 / 2000 [ 30%]  (Warmup)\nChain 3: Iteration:  800 / 2000 [ 40%]  (Warmup)\nChain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup)\nChain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling)\nChain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling)\nChain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling)\nChain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling)\nChain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling)\nChain 3: Iteration: 2000 / 2000 [100%]  (Sampling)\nChain 3: \nChain 3:  Elapsed Time: 0.037 seconds (Warm-up)\nChain 3:                0.023 seconds (Sampling)\nChain 3:                0.06 seconds (Total)\nChain 3: \n\nSAMPLING FOR MODEL 'anon_model' NOW (CHAIN 4).\nChain 4: \nChain 4: Gradient evaluation took 1e-06 seconds\nChain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.01 seconds.\nChain 4: Adjust your expectations accordingly!\nChain 4: \nChain 4: \nChain 4: Iteration:    1 / 2000 [  0%]  (Warmup)\nChain 4: Iteration:  200 / 2000 [ 10%]  (Warmup)\nChain 4: Iteration:  400 / 2000 [ 20%]  (Warmup)\nChain 4: Iteration:  600 / 2000 [ 30%]  (Warmup)\nChain 4: Iteration:  800 / 2000 [ 40%]  (Warmup)\nChain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup)\nChain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling)\nChain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling)\nChain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling)\nChain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling)\nChain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling)\nChain 4: Iteration: 2000 / 2000 [100%]  (Sampling)\nChain 4: \nChain 4:  Elapsed Time: 0.036 seconds (Warm-up)\nChain 4:                0.022 seconds (Sampling)\nChain 4:                0.058 seconds (Total)\nChain 4: \n\n\n\nconditional_effects(last_q)\n\n\n\n\n\n\n\n\n\nbind_rows(\n  tidy(last_q) %&gt;% select(term, estimate, contains(\"conf\")) %&gt;% filter(term != \"sd__Observation\")\n) %&gt;% \n  mutate(method = rep(c(\"brm()\"), each = 1)) %&gt;% \n  \n  ggplot(aes(x = estimate, xmin = conf.low, xmax = conf.high, y = method)) +\n  geom_pointrange() +\n  scale_x_continuous(\"parameter space\", expand = expansion(mult = 0.2)) +\n  scale_y_discrete(expand = expansion(mult = 5)) +\n  facet_wrap(~ term, scales = \"free_x\")\n\nWarning in tidy.brmsfit(last_q): some parameter names contain underscores: term\nnaming may be unreliable!"
  },
  {
    "objectID": "posts/Bayes_Lab_1.html#references",
    "href": "posts/Bayes_Lab_1.html#references",
    "title": "Bayes and Penguins",
    "section": "References",
    "text": "References\nGelman, A., Hill, J., & Vehtari, A. (2020). Regression and other stories. Cambridge University Press. https://doi.org/10.1017/9781139161879\nKruschke, J. K. (2015). Doing Bayesian data analysis: A tutorial with R, JAGS, and Stan. Academic Press. https://sites.google.com/site/doingbayesiandataanalysis/\nMcElreath, R. (2020). Statistical rethinking: A Bayesian course with examples in R and Stan (Second Edition). CRC Press. https://xcelab.net/rm/statistical-rethinking/\nMcElreath, R. (2015). Statistical rethinking: A Bayesian course with examples in R and Stan. CRC press. https://xcelab.net/rm/statistical-rethinking/"
  },
  {
    "objectID": "posts/Bayes_Lab_1.html#session-information",
    "href": "posts/Bayes_Lab_1.html#session-information",
    "title": "Bayes and Penguins",
    "section": "Session information",
    "text": "Session information\n\nsessionInfo()\n\nR version 4.4.2 (2024-10-31)\nPlatform: aarch64-apple-darwin20\nRunning under: macOS Sequoia 15.3.2\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.4-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.12.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: America/New_York\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] ggdist_3.3.2        broom.mixed_0.2.9.6 broom_1.0.7        \n [4] brms_2.22.0         Rcpp_1.0.13-1       ggside_0.3.1       \n [7] lubridate_1.9.3     forcats_1.0.0       stringr_1.5.1      \n[10] dplyr_1.1.4         purrr_1.0.2         readr_2.1.5        \n[13] tidyr_1.3.1         tibble_3.2.1        ggplot2_3.5.1      \n[16] tidyverse_2.0.0    \n\nloaded via a namespace (and not attached):\n [1] tidyselect_1.2.1     viridisLite_0.4.2    farver_2.1.2        \n [4] loo_2.8.0            fastmap_1.2.0        tensorA_0.36.2.1    \n [7] digest_0.6.37        estimability_1.5.1   timechange_0.3.0    \n[10] lifecycle_1.0.4      StanHeaders_2.32.10  processx_3.8.4      \n[13] magrittr_2.0.3       posterior_1.6.0      compiler_4.4.2      \n[16] rlang_1.1.4          tools_4.4.2          utf8_1.2.4          \n[19] yaml_2.3.10          knitr_1.49           labeling_0.4.3      \n[22] bridgesampling_1.1-2 htmlwidgets_1.6.4    curl_6.0.0          \n[25] pkgbuild_1.4.6       plyr_1.8.9           abind_1.4-8         \n[28] withr_3.0.2          grid_4.4.2           stats4_4.4.2        \n[31] fansi_1.0.6          xtable_1.8-4         colorspace_2.1-1    \n[34] future_1.34.0        inline_0.3.21        emmeans_1.10.7      \n[37] globals_0.16.3       scales_1.3.0         cli_3.6.3           \n[40] mvtnorm_1.3-2        rmarkdown_2.29       generics_0.1.3      \n[43] RcppParallel_5.1.9   rstudioapi_0.17.1    reshape2_1.4.4      \n[46] tzdb_0.4.0           rstan_2.32.6         splines_4.4.2       \n[49] bayesplot_1.11.1     parallel_4.4.2       matrixStats_1.5.0   \n[52] vctrs_0.6.5          V8_6.0.1             Matrix_1.7-1        \n[55] jsonlite_1.8.9       callr_3.7.6          hms_1.1.3           \n[58] listenv_0.9.1        glue_1.8.0           parallelly_1.42.0   \n[61] ps_1.8.1             codetools_0.2-20     distributional_0.5.0\n[64] stringi_1.8.4        gtable_0.3.6         QuickJSR_1.5.1      \n[67] palmerpenguins_0.1.1 munsell_0.5.1        pillar_1.9.0        \n[70] furrr_0.3.1          htmltools_0.5.8.1    Brobdingnag_1.2-9   \n[73] R6_2.5.1             evaluate_1.0.1       lattice_0.22-6      \n[76] backports_1.5.0      rstantools_2.4.0     coda_0.19-4.1       \n[79] gridExtra_2.3        nlme_3.1-166         checkmate_2.3.2     \n[82] mgcv_1.9-1           xfun_0.49            pkgconfig_2.0.3"
  }
]